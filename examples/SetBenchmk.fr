--- compare different Set implementations

module examples.SetBenchmk
    inline candidates (asTypeOf) 
    where

import frege.IO
import frege.lib.Random
import frege.data.List

import frege.List as AVL()
import frege.data.Set as T()
import frege.data.HashSet as H()

data AVLSet a = AVLSet (AVL.Tree a ())

asTypeOf :: a -> a -> a
asTypeOf a b = a


class TestCandidate x where
    singleton :: Int -> x Int
    elemOf    :: Int -> x Int -> Bool
    fromList  :: [Int] -> x Int
    size      :: x Int -> Int
    
instance TestCandidate AVLSet where
    singleton a = AVLSet (AVL.Tree.insert AVL.Nil a ())
    elemOf a (AVLSet s) = isJust (s.lookup a)
    fromList xs = AVLSet (AVL.fromKeys xs)
    size (AVLSet s) = length (AVL.values s)
    
instance TestCandidate T.Set where
    singleton = T.singleton
    elemOf = T.member    
    fromList xs = T.fromList xs
    size = T.size

instance TestCandidate H.HashSet where
    singleton = H.singleton
    elemOf = H.member    
    fromList xs = H.fromList xs
    size = H.size

test1 s ntimes = and (zipWith elemOf elems sets) where
    elems = replicate ntimes 42
    sets  = map singleton elems  `asTypeOf` [s]

test2 s ntimes = size (fromList (1..ntimes) `asTypeOf` s) == ntimes
test6 s r ntimes = size (fromList (take ntimes rvals) `asTypeOf` s) == r
test7 s r ntimes = r == length elems
    where
        elems = filter (`elemOf` tree) (1..ntimes)
        tree  = fromList (take ntimes rvals) `asTypeOf` s

test3 s ntimes = and (zipWith elemOf elems sets) where
    elems = replicate ntimes 42
    sets  = map (\n -> fromList (n-5..n+4)) elems  `asTypeOf` [s]

test4 s ntimes = and (zipWith elemOf elems sets) where
    elems = replicate ntimes 42
    sets  = map (\n -> fromList (n-50..n+49)) elems  `asTypeOf` [s]

test5 s ntimes = and (zipWith elemOf elems sets) where
    elems = take ntimes rvals
    sets  = map (\n -> fromList elems) elems  `asTypeOf` [s] 

rvals = randomRs (1, 2_000_000) (mkStdGen 20120308)
    
runTest t times = do
    start <- currentTimeMillis ()
    if (t times)
    then do
        end   <- currentTimeMillis ()
        println (show (end-start) ++ "ms.")
    else println "Test not passed"

main [] = main [show 500_000]
main (arg:_) 
    | Right times <- String.int arg = do
        let avl  = AVLSet AVL.Tree.Nil
        let tset = T.Set.empty
        let hash = H.HashSet.empty
        let t1 = show times ++ " singletons, lookups:        "
        let t2 = show times ++ " ascending inserts, size:    "
        let t6 = show times ++ " random inserts, size:       "
        let t7 = show times ++ " random inserts, lookup asc: "
        let t3 = show (times `quot` 10) ++ " sets of size 10, lookups: "
        let t4 = show (times `quot` 100) ++ " sets of size 100, lookups: "
        let t5 = show (times `quot` 1000) ++ " sets of size 1000, lookups: "
        -- println (take 100 rvals) 
        print ("AVL  " ++ t1); runTest  (test1 avl) times
        print ("Tree " ++ t1); runTest  (test1 tset) times
        print ("Hash " ++ t1); runTest  (test1 hash) times
        print ("AVL  " ++ t3); runTest  (test3 avl)  (times `quot` 10)
        print ("Tree " ++ t3); runTest  (test3 tset) (times `quot` 10)
        print ("Hash " ++ t3); runTest  (test3 hash) (times `quot` 10)
        print ("AVL  " ++ t4); runTest  (test4 avl)  (times `quot` 100)
        print ("Tree " ++ t4); runTest  (test4 tset) (times `quot` 100)
        print ("Hash " ++ t4); runTest  (test4 hash) (times `quot` 100)
        print ("AVL  " ++ t5); runTest  (test5 avl)  (times `quot` 1000)
        print ("Tree " ++ t5); runTest  (test5 tset) (times `quot` 1000)
        print ("Hash " ++ t5); runTest  (test5 hash) (times `quot` 1000)
        print ("AVL  " ++ t2); runTest  (test2 avl) times
        print ("Tree " ++ t2); runTest  (test2 tset) times
        print ("Hash " ++ t2); runTest  (test2 hash) times
        print ("preparing " ++ show times ++ " randoms ...")
        let ttr = take times rvals
            d = length (AVL.values (AVL.fromKeys (ttr)))
            low = length ((AVL.values â€¢ AVL.fromKeys) (filter (<=500_000) ttr))
        println (" we have " ++ show d ++ " different values, and " ++ show low ++ " of them are <=500_000")
        print ("AVL  " ++ t6); runTest  (test6 avl d) times
        print ("Tree " ++ t6); runTest  (test6 tset d) times
        print ("Hash " ++ t6); runTest  (test6 hash d) times
        print ("AVL  " ++ t7); runTest  (test7 avl low) times
        print ("Tree " ++ t7); runTest  (test7 tset low) times
        print ("Hash " ++ t7); runTest  (test7 hash low) times
        
main args  = error ("need integer argument instead of: " ++ show args)
        