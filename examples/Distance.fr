--- Damerau Levenshtein Distance using arrays
package examples.Distance where

import frege.IO(BufferedReader)
import frege.compiler.Utilities as U()
import Data.List

--- main [-ua] filename
-- result with -u runtime 15.508 wallclock seconds.
-- result with -a runtime 12.886 wallclock seconds.
main [] = return ()
main [flag ~ ´-[ua]´, arg] = do
    efile <- BufferedReader.open arg
    case efile of
        Left exc -> do
            print "Couldn't read "
            println exc.getMessage
        Right file = do
            lines <- file.getlines
            let matched = fromMaybe "" (flag.group 0)
                fun   = if matched == "-u" then U.dlDistance else dlDistance
                words = (unique • filter ("" !=)) 
                            (#[\d\W\s]+#.splitted (joined " " lines))
                dists = map (fun (head words)) words
                ds = sort (zip dists words)
            print (head words)
            print "  "
            println (take 10 ds)
main args = do
    println (zip args (map (dlDistance (head args)) args))

--- compute the Damerau-Levenshtein-Distance of two 'String's 
--- (Optimal String Alignment Distance)
dlDistance :: String -> String -> Int
dlDistance src dst = ST.run it
    where
        !m = length src
        !n = length dst
        index i j = i*(n+1)+j
        initI :: IntArray s -> Int -> ST s (IntArray s)
        initI !arr i
            | i <= m = do 
                IntArray.setAt arr (index i 0) i
                initI arr (i+1)
            | otherwise = return arr
        initJ :: IntArray s -> Int -> ST s (IntArray s)
        initJ !arr j
            | j <= n = do 
                IntArray.setAt arr (index 0 j) n
                initJ arr (n+1)
            | otherwise = return arr
        loop :: IntArray s -> Int -> Int -> ST s (IntArray s)
        loop !arr i j
            | i <= m, j <= n = do
                du  <- arr.getAt (index (i-1) j)
                dl  <- arr.getAt (index i (j-1))
                dul <- arr.getAt (index (i-1) (j-1))
                let cost = if src.[i-1] == dst.[j-1] then 0 else 1
                    dij  = min (dl + 1) (min (du + 1) (dul + cost))
                dijx <- if i>1 && j>1 
                            && src.[i-1] == dst.[j-2]
                            && src.[i-2] == dst.[j-1]
                        then do
                            k <- arr.getAt (index (i-2) (j-2))
                            return (min dij k)
                        else return dij
                arr.setAt (index i j) dijx 
                loop arr  i (j+1)
            | i < m, j > n = loop arr (i+1) 1
            | otherwise = return arr
                
        it :: ST s Int
        it = do
            arr <- IntArray.new ((m+1)*(n+1))
            arr <- initI arr 0
            arr <- initJ arr 0
            arr <- loop arr 1 1
            arr.getAt (index m n)
            