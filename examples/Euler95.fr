{--
    The proper divisors of a number are all the divisors excluding the number itself. 
    For example, the proper divisors of 28 are 1, 2, 4, 7, and 14. 
    As the sum of these divisors is equal to 28, we call it a perfect number.

    Interestingly the sum of the proper divisors of 220 is 284 
    and the sum of the proper divisors of 284 is 220, forming a chain of two numbers. 
    For this reason, 220 and 284 are called an amicable pair.

    Perhaps less well known are longer chains. 
    For example, starting with 12496, we form a chain of five numbers:

    12496  14288  15472  14536  14264 ( 12496  ...)

    Since this chain returns to its starting point, it is called an amicable chain.

    Find the smallest member of the longest amicable chain with no element exceeding one million.
-}

-- Rank 229, Level 3, National Rank 367
-- initial version runtime 3448.239 wallclock seconds.

module examples.Euler95 where

import examples.EulerLib
import Data.List (maximumBy)

--- all numbers and their successors
cache = IntArray.fromList cacheNumbers where
    cacheNumbers = map next [0..1_000_000]

next :: Int -> Int
next = summe â€¢ properDivisors

--- successor in a chain
successor n 
    | n >= 0 && n < cache.length = Just cache.[n]
    | otherwise = Nothing
    
--- check chain starting at a certain number
--- return Just chain if it is an amicable chain with no element exceeding one million
--- or otherwise 'Nothing'
chain n = chain [n]  (next n) where
    -- chain elems Nothing = Nothing  -- has an element > 1_000_000
    chain elems m
        | m > 1_000_000 = Nothing
        | m == n    = Just (reverse elems)
        | m `elem` elems = Nothing -- did not return to n
        | otherwise = chain (m:elems) (next m)        

main args = do
    println $ next 777
    println $ chain 12496
    println $ maybe 0 minimum (maximumBy (comparing (maybe 0 length)) (map chain [1..1_000_000]))
    -- println (maybe 0 minimum (chain 629072))
    