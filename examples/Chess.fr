-- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

{--
    This program is supposed to implement the UCI interface to play chess.

    Can be used with frontends like Arena.
-}

{-
 * $Author$
 * $Revision$
 * $Date$
 * $Id$
 -}

unfinished package examples.Chess where


import frege.IO (stderr, stdout, stdin, <<)

{--
    The board contains

    - 4 longs, each holding 2 columns (ae, bf, cg, dh)

    There are 16 4-bit quantities (nibbles) in
    each long.

    The leftmost bit is 0 for white, 1 for black
    fff = 000 for empty fields,
          001 pawn, 010 knight, 011 bishop, 100 rook, 101 queen, 110 king

    This is so that when we have a 6 bit field number
    the lower 2 bits select one of ae, bf cg or dh
    and the upper 6 bits with the lower 2 bits cleared
    give the amount we must shift that long to the right to
    extract the info from the lower 4 bits.

    Example: Field b7 is (7-1)*8+1 = 49 = 110001

    This would select field bf right shifted 48 bits

    - An int for additional information with the following bit mask

    xxxxxxxx xxxxxxxx xxpppppp acls xCLS
    where
        * x: bit is reserved
        * pppppp: en passant target or 000000 if no en passant possible
        * a: 0 for white to move, 1 for black to move
        * c: 1 if black castled already,  0 otherwise
        * l: 1 if long  castling possible for black, 0 otherwise
        * s: 1 if short castling possible for white, 0 otherwise
        * C: 1 if white castled already, 0 otherwise
        * L: 1 if long  castling possible for white, 0 otherwise
        * S: 1 if short castling possible for black, 0 otherwise
-}
free = 0
pawn = 1
knight = 2
bishop = 3
rook = 4
queen = 5
king = 6

white n = n `band` 7
black n = n `bor`  8

data Board = !Board {
    ae :: Long,     -- e8a8e7a7e6a6e5a5e4a4e3a3e2a2e1a1
    bf :: Long,     -- f8b8f7b7....................f1b1
    cg :: Long,     -- g8c8g7c7....................g1c1
    dh :: Long,     -- h8d8h7d7....................h1g1
    flags :: Int    -- various information

    } where
        -- get what is at field f in board b
        getAt (b::Board) f = (l `bshr` (f `band` 0x3c)) `band` 0xfL
            where
                l = case f `band` 3 of
                    0 -> b.ae
                    1 -> b.bf
                    2 -> b.cg
                    _ -> b.dh
        -- set what is at field f in board b to x
        setAt (!b::Board) !f !x
            | x > 15 || x < 0 || white x == 7 = error ("illegal set: " ++ show x)
            | otherwise = case f `band` 3 of
                0 -> Board (setl b.ae f x) b.bf b.cg b.dh b.flags
                1 -> Board b.ae (setl b.bf f x) b.cg b.dh b.flags
                2 -> Board b.ae b.bf (setl b.cg f x) b.dh b.flags
                _ -> Board b.ae b.bf b.cg (setl b.dh f x) b.flags
        -- like setAT, but also write new flags
        setAtF (!b::Board) !f !x flgs
            | x > 15 || x < 0 || white x == 7 = error ("illegal set: " ++ show x)
            | otherwise = case f `band` 3 of
                0 -> Board (setl b.ae f x) b.bf b.cg b.dh flgs
                1 -> Board b.ae (setl b.bf f x) b.cg b.dh flgs
                2 -> Board b.ae b.bf (setl b.cg f x) b.dh flgs
                _ -> Board b.ae b.bf b.cg (setl b.dh f x) flgs
        -- helper function to place content into a preselected long
        private setl l f x = ((l `bor` mask) `bxor` mask) `bor` bits
                    where
                        off = f `band` 0x3c
                        mask = 15L `bshl` off
                        bits = Int.long x `bshl` off


startpos = fold (\b\(i,x) -> Board.setAt b i x) (Board 0L 0L 0L 0L flags)
    (zip (0..7) (map white nonpawn)
     ++ zip (8..15) (repeat (white pawn))
     ++ zip (48..55) (map black nonpawn)
     ++ zip (56..63) (repeat (black pawn)))
  where
    nonpawn = [rook, knight, bishop, queen, king, bishop, knight, rook]
    flags = 0x33 -- white's move, no en passant, all castling possible for both

--- here it starts all
main args = do
        isin  <- stdin
        isrin <- IO.InputStreamReader.new isin
        brin  <- IO.BufferedReader.fromISR isrin
        line  <- brin.readLine
        either bad (good brin startpos) line
    where
        bad (exc::JException) = do
            stderr << ("Error while reading line from stdin " ++ exc.getMessage ++ "\n")
            IO.return ()
        good _ _ Nothing = IO.return ()
        good (brin::IO.BufferedReader) st (Just s) = do
            st' <- process s st
            line <- brin.readLine
            either bad (good brin st') line

process "uci" st = do
    println "id name Frege Chess"
    println "id author Ingo Wechsung"
    println "uciok"
    IO.return st

process "isready" st = do
    println "readyok"
    IO.return st

process "ucinewgame" st = IO.return startpos

process "quit" st = do
    IO.exit 0
    IO.return st        -- not reached, just there to make compiler happy

process xlerb st = do
    println "Can't understand:"
    println xlerb
    return st
