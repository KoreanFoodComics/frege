{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
 * This package implements the second compiler pass after lexical analysis.
 * It sets up the symbol table and performs the imports.
 -}

package frege.compiler.Import where

-- import frege.IO(stderr `<<`)
import frege.data.Tuples()
import frege.List(Tree, isEmpty, keys, insertkv, each, values, lookup, insert)
import Data.List as DL(sortBy, zipWith4)
-- import Java.Lang(Throwable)
import frege.compiler.Classtools    as CT()
import frege.compiler.Utilities     as U()
import frege.compiler.Data          as D
import frege.compiler.Nice(msgdoc, text)
-- import frege.compiler.Enter()       as E

{--
 *  Post condition for import pass
 -}
post :: StG Bool
post = do
        global <- getST
        stio ( cond global )
    where
        cond :: Global -> Bool
        cond global = !(isEmpty global.packages)       -- there is at least 1 package
            && !(isEmpty global.namespaces)     -- and a namespace
                                                -- and we can find our own symbol table
            && isJust (global.packages.lookup global.thisPack)
            && isJust (global.packages.lookup pPreludeBase) -- and the non empty prelude
            -- && (not • isEmpty • unJust • global.packages.lookup) pPrelude

--- import pass, set up environment and do imports
pass :: StG (String, Int)
pass = do
            (g::Global) <- getST
            initenv g.thisPack
            (g::Global) <- getST
            U.debugST TRACE2 (show g.namespaces.each)
            stio ("packages", length (keys g.packages))
    where
        initenv p
            | p == pPreludeBase = do
                                     mkSymtabs
                                     g <- getST
                                     -- add alias "PreludeBase" for namespace
                                     changeST Global.{namespaces <- insertkv (NSX "PreludeBase") g.thisPack}
                                     preludeBasics
            | otherwise         = do mkSymtabs; doImports
            where
                -- make sure we find our own symtab
                mkSymtabs = do
                    g <- getST
                    let
                        newn = (Nil :: Tree NSName Pack).insert g.thisPack.nsName g.thisPack
                        newp = (Nil :: Tree Pack Symtab).insert g.thisPack        (Nil::Symtab)
                    changeST Global.{namespaces = newn}
                    changeST Global.{packages = newp}

{--
 * check definitions for Prelude import.
 * if not there, prepend an automatic @import frege.Prelude@
 -}
doImports = do
    (g::Global) <- getST
    let imports0 = alwaysImport ++ [ imp | imp@ImpDcl {pos} <- g.definitions]
        alwaysImport = if inPrelude g.thisPack g then [] else D.importAlways
        -- check if prelude needs not be imported
        prelimp  = g.thisPack == pPrelude || inPrelude g.thisPack g || any (isPimport) imports0
        isPimport (ImpDcl {pack}) = pPrelude == (Pack.new pack)
        isPimport _               = false
        preldef  = ImpDcl {pos=Position.null, pack=Pack.un pPrelude, as=Just "Prelude", imports = linkAll}  -- import frege.Prelude
        imports = if prelimp then imports0 else preldef : imports0
    forsome imports importHere
    stio ()

importHere (imp@ImpDcl {pos,imports}) = do
        g <- getST
        let pack = Pack.new imp.pack
            as   = maybe pack.nsName NSX imp.as
            exists = g.namespaces.lookup as
        changeST Global.{sub <- SubSt.{nsPos <- insertkv as imp.pos}}
        maybe (newns imp pack as) (oldns imp pack as) exists
    where
        newns imp pack as = do
                importClass pos pack        -- make sure g.packages pack exists when no error
                g <- getST
                case g.packages.lookup pack of
                    Just env -> do
                        changeST Global.{namespaces <- insertkv as pack}
                        mbfp <- getFP (pack.unpack g)
                        case mbfp of
                            Right (Just fp) -> U.docWarning pos ("module " ++ pack.unpack g)
                                                    (Just fp.doc) 
                            nothing  -> return ()
                        importEnvSilent pos env as imports
                    Nothing -> stio ()      -- importClass did the error logging
        oldns imp pack as oldp = do
                g <- getST
                let old = Pack.unpack oldp g
                when (pack != oldp) do
                    U.error pos (msgdoc ("namespace `"
                                        ++ NSName.unNS as ++ "` previously opend for `"
                                        ++ old ++ "`"))
                when (pack == oldp) do
                    -- g <- getST
                    case g.packages.lookup pack of
                        Just env -> importEnvSilent pos env as imports
                        Nothing -> U.fatal pos (text ("package " ++ Pack.unpack pack g ++ " should be here?"))
                stio ()
importHere d = U.fatal d.pos (text ("must be an import definition, not " ++ show (constructor d)))


--- Avoid warnings when we resolve items in the imported package
importEnvSilent pos env ns imps = do
    changeST Global.{options <- Options.{flags <- flip U.setFlag NODOCWARNINGS}}
    importEnv pos env ns imps
    changeST Global.{options <- Options.{flags <- flip U.clrFlag NODOCWARNINGS}}
     
{--
    Process an import list

    An export list with except list is equivalent to one that names all public
    top level symbols whose name does not appear in the list.
-}
importEnv :: Position -> Symtab -> NSName -> ImportList -> StG ()
importEnv pos env ns (imp@Imports {except=true, items}) = do
        g <- getST
        let xs = [ withNS ns.unNS  (ImportItem.name e) | e <- items ]
        exss <- mapSt (U.resolve (VName g.thisPack) pos) xs
        let exs = fold (++) [] exss
            nitems = [ protoItem.{ name = Simple pos.first.{tokid=VARID, value=(Symbol.name sym).base},
                                      members = nomem csym,
                                      alias   = (Symbol.name sym).base} |
                        sym <- sortBy (comparing constructor) (values env),         -- place SymL before SymC
                        csym <- (sym.name.findit g).toList,
                        not (Symbol.{cid?} csym)                                    -- no constructors
                            || (Symbol.name sym).base != (Symbol.name csym).base,   -- except renamed ones
                        Symbol.name csym `notElem` exs,
                        Symbol.vis sym == Public
                     ]
            nomem (SymC {}) = Just []
            -- nomem (SymT {}) = Just []
            nomem _         = Nothing
        importEnv pos env ns imp.{except=false, items=nitems}

--- A public import list is equivalent to one without public but public specified for all items.
importEnv pos env ns (imp@Imports {publik=true, items})
    = importEnv pos env ns imp.{publik = false, items <- map ImportItem.export}
--- All items in the list are processed one by one
importEnv pos env ns (Imports {items}) = foreach items (linkItem ns.unNS)

--- a symbolic link is dereferenced and the link goes to the target
linkHere ns (item@Item {alias=itema}) (link@SymL {name, alias}) = do
    let pos = Pos item.name.id item.name.id
    g <- getST
    case alias.findit g of
        Just sym -> linkHere ns item sym
        Nothing -> U.fatal (pos) (text (link.name.nice g ++ " points to non-existing " ++ link.alias.nice g))

-- an alias of Nothing is replaced by the base name of the item linked to
-- linkHere ns (item@Item {alias=Nothing}) sym = linkHere ns item.{alias = Just sym.name.base} sym

-- linkHere ns (item@Item {alias=Just ""}) sym = U.fatal item.pos ("bad alias for " ++ item.name ++ ", must be at least 1 char")

-- otherwise the alias is checked for correctness
linkHere ns (item@Item {publik,name,members,alias=newn}) sym = do
    let pos   = Pos name.id name.id
    let conid = (newn.elemAt 0).isUpperCase
        conidOk
            | TName _ _ <- sym.name = true
            | SymD {}   <- sym      = true
            | otherwise             = false
        vis = if publik then Public else Private
    g <- getST
    U.logmsg TRACE2 pos (text ("linkHere: " ++ ns ++ newn ++ ", vis =" ++ show vis
        ++ " ==> " ++  nice sym g))
    case sym.name of
        TName _ b
            | newn == sym.name.base || conid = U.linkqv (TName g.thisPack newn) sym vis
            | otherwise = do
                U.error pos (msgdoc ("Alias for " ++ nice sym g ++ " must be a type name, not `" ++ newn ++ "'"))
                stio ()
        _
            | newn == sym.name.base || conid == conidOk = U.linkqv   (VName g.thisPack newn) sym vis
            | otherwise = do
                U.error pos (msgdoc ("Alias for " ++ nice sym g ++ " must be a "
                    ++ (if conidOk then "constructor" else "variable")
                    ++ "name, not  `" ++ newn ++ "'"))
                stio ()
    
    changeST Global.{sub <- SubSt.{
        idKind <- insertkv (KeyTk pos.first) (Right sym.name)}}
    
    case sym of
        SymT {env}
            | Nothing <- members = do        -- link constructors also
                let cons = [ item.{name <- (pos.first.{tokid=CONID, value=mem.name.base} `qBy`),
                                    members = Nothing,
                                    alias = mem.name.base, publik = false}
                                | mem@SymD {pos} <- values env, mem.vis != Private ]
                foreach cons (linkItem ns)
            | Just ms <- members = do
                let nms = map  ImportItem.{name <- (`qBy` item.name) • SName.id} ms
                foreach nms (linkItem ns)
        SymC {env}
            | Nothing <- members =  do        -- link class methods
                let meth = [  item.{name <- (pos.first.{tokid=VARID, value=sym.name.base} `qBy`),
                                    members = Nothing, alias = sym.name.base}
                                | sym@SymV {pos, vis} <- values env,
                                  vis == Public || vis == Abstract,
                                  not (defined sym.name.base) ]     -- import only yet undefined class members
                    -- here = g.thisTab
                    defined s = isJust (QName.find (VName g.thisPack s) g)
                foreach meth (linkItem ns)
            | Just ms <- members = do
                let nms = map  ImportItem.{name <- (`qBy` item.name) • SName.id} ms
                foreach nms (linkItem ns)
        _ -> if isNothing members then stio ()
             else do
                U.error pos (msgdoc ("Member list not allowed for " ++ show name))
                stio ()

linkItem ns (item@Item {publik,name,members,alias}) = do
    g <- getST
    let pos = Pos name.id name.id
    res <- U.resolve (VName g.thisPack) pos (withNS ns name)
    case res of
        [] -> stio ()       -- got error message from resolve or excluded
        [x] -> case x.findit g of
            Just sym -> do
                linkHere ns item sym
            Nothing  -> U.fatal pos (text (x.nice g ++ " resolved, but not found"))
        xs  | (tname:_) <- [ x | x@TName _ _ <- xs ] = do    -- look for a type name
                xsym    = unJust (tname.findit g)
                linkHere ns item xsym
            | otherwise = do        -- by taking the first result, we resolve NS.x
                let -- canmean = [ sym.nice g | x <- xs, Just sym <- [QName.findit x g]]
                    qname = head xs
                    xsym  = unJust (qname.findit g)
                -- U.warn pos (text ("`" ++ show (withNS ns name) ++ "` could mean the "
                --     ++ joined " or the " canmean
                --     ++ ", but we are importing the " ++ xsym.kind g))
                linkHere ns item xsym
            



importClass :: Position -> Pack -> StG ()
importClass pos pack = do
    g <- getST
    maybe (importClassData pos pack >> stio ()) (const (stio ())) (g.packages.lookup pack)

{-- 
    Get the frege package that is named in the argument
    from the cache or through the global loader.
    -}

getFP !clname = do
    g <- getST
    cache <- doio g.cache.get
    case cache.lookup clname of
        Nothing -> do
            let 
                notfound :: ClassNotFoundException -> IO (ClassNotFoundException | Maybe CT.FregePackage)
                notfound = return . Left            
            exmb <- doio (CT.getFrege g.sub.loader clname >>= return . Right 
                            `catch` notfound)
            case exmb of
                Right (Just fp) -> do
                        doio (g.cache.put (cache.insert clname fp)) -- remember me
                        stio exmb
                _  ->   stio exmb
        just    -> stio (Right just)


{--
 * Reconstruct symbol table of imported package from annotation class 'CT.FregePackage'
 *
 * Only the most obvious logical errors are recognized, however, they will cause the
 * compiler to crash.
 *
 * We rely on the following:
 * - java annotations contain no null values
 * - all indexes into the 'CT.Tau', 'CT.Rho' and 'CT.Sigma' arrays are valid.
 *
 * Should the assumptions fail to hold then the import will crash with an ArrayOutOfBounds
 * or a NullPointer exception.
 *
 * On the other hand, if the code in "GenMeta.fr" is correct and the annotations have
 * not been hacked (for example by editing intermediate java files), then the import is
 * guaranteed not to crash.
 *
 * This uses and updates the cache of frege packages from class files which are up to date
 * whether or not the 'MAKE' option is set. This avoids construction of a class loader
 * also in cases when multiple source files are compiled.
 -}
importClassData pos pack = do
    g <- getST
    let clname = Pack.unpack pack g
    U.logmsg TRACE2 pos (text ("importing " ++ clname))
    let mkpos off nm = Pos t t where
            t :: Token
            t = Token {tokid=VARID, value=nm, line=1, col=1, offset=off}
        -- getFrege (Left x) clname   = IO.return (Left x)
        -- getFrege (Right cl) clname = CT.getFrege cl clname
    anno <- getFP clname
    case anno of
        Left exc
            | inPrelude g.thisPack g, inPrelude pack g = do
                -- a prelude package may miss a name space, but must then not use
                -- the syntactic sugar that is provided through it
                stio Nothing
            | otherwise = do
                U.error pos (msgdoc ("import error " ++ Throwable.show exc))
                stio Nothing
        Right Nothing -> do
            U.error pos (msgdoc ("`" ++ clname ++ "` is not a frege package"))
            stio Nothing
        Right (Just fp) -> do
            g <- getST
            let packs = [ Pack.new p | 
                            p <- map fp.imps.elemAt (enumFromTo 0 (fp.imps.length-1)) ]
            foreach packs (importClass pos)
            -- now everything is in place for making the new symtab
            changeST Global.{packages <- insertkv pack Nil}
            let itree = fold rebuildTau Nil (enumFromTo 0 (fp.taus.length-1))
                -- Relies on the property that there may be no forward references.
                -- The function that builds it must guarantee this. see GenMeta.tauIndex
                rebuildTau t n = case tau.kind of
                        0 -> insert t n tapp
                        1 -> insert t n tfun
                        2 -> insert t n (TCon pos (rebuildQN tau.tcon.[0]))
                        3 -> insert t n (TVar pos (nKind tau.suba) tau.tvar)
                        k -> error ("illegal tau kind " ++ show k ++ " in tau# " ++ show n)
                    where
                        bad = error ("illegal subreferences in tau# " ++ show n)
                        tau = fp.taus.[n]
                        ab = do
                            a <- lookup t tau.suba
                            b <- lookup t tau.subb
                            Just (a,b)
                        tapp = maybe bad (uncurry TApp) ab
                        tfun = maybe bad (uncurry Tau.tfun) ab
                nTau i = maybe abort id (itree.lookup i)
                    where abort = error ("unknown tau index " ++ show i)
                ktree = fold rebuildKind Nil (enumFromTo 0 (fp.kinds.length-1))
                rebuildKind t n = case kind.kind of
                        0 -> insert t n KType
                        1 -> insert t n KGen
                        2 -> insert t n KVar
                        3 -> insert t n kapp
                        k -> error ("illegal kind " ++ show k ++ " in kind# " ++ show n)
                    where
                        bad = error ("illegal subreferences in kind#" ++ show n)
                        kind = fp.kinds.[n]
                        ab = do
                            a <- lookup t kind.suba
                            b <- lookup t kind.subb
                            return (a,b)
                        kapp = maybe bad (uncurry KApp) ab
                nKind i = maybe abort id (ktree.lookup i)
                    where abort = error ("unknown kind index " ++ show i) 
                rtree = fold rebuildRho Nil (enumFromTo 0 (fp.rhos.length-1))
                rebuildCtx (ctx::CT.Context) = Ctx pos (rebuildQN ctx.clas) (nTau ctx.tau)
                rebuildRho t n = case rho.rhofun of
                        false -> insert t n (RhoTau ctx (nTau rho.rhotau))
                        true  -> insert t n (RhoFun ctx (nSig t rho.sigma) (nR t rho.rhotau))                                
                    where
                        rho = fp.rhos.[n]
                        ctx = [ rebuildCtx (rho.cont.[n]) | n <- enumFromTo 0 (rho.cont.length-1) ]
                        nR rtree i = maybe abort id (rtree.lookup i)
                            where abort = error ("unknown rho index " ++ show i)
                        nSig rtree i = ForAll bnd (nR rtree sig.rho)
                            where sig = fp.sigmas.[i]
                                  bnd = zip sig.bound.toList (map nKind sig.kinds.toList)
                nRho i = maybe abort id (rtree.lookup i)
                    where abort = error ("unknown rho index " ++ show i)
                nSigma i = ForAll bnd (nRho sig.rho)
                    where sig = fp.sigmas.[i]
                          bnd = zip sig.bound.toList (map nKind sig.kinds.toList)
                rebuildEx t n = res >>= stio • insert t n
                    where
                        !res = case exa.xkind of
                            0 -> stio Ann {ex = xref exa.subx1, typ = Just (nSigma exa.lkind)}
                            1 -> stio (App (xref exa.subx1) (xref exa.subx2) Nothing)
                            2 -> do
                                alts <- mapSt calt (zip pats exps)
                                stio Case {ckind = from exa.lkind, ex = xref exa.subx1,
                                            typ = Nothing, alts}
                            3 -> stio Con {pos = Position.null, typ = Nothing, name = rebuildQN exa.name.[0]}
                            4 -> stio (Ifte (xref exa.subx1) (xref exa.subx2) (xref exa.subx3) Nothing)
                            5 -> do
                                alts <- mapSt calt (zip pats exps)
                                let alt = head alts
                                stio Lam {pat = alt.pat, ex = alt.ex, typ = Nothing}
                            6 -> stio Lit {pos=Position.null, typ=Nothing, kind = from exa.lkind, value = exa.varval}
                            7 -> stio Vbl {pos=Position.null, typ=Nothing, name=Local 0 exa.varval}
                            8 -> stio Vbl {pos=Position.null, typ=Nothing, name=rebuildQN exa.name.[0]}
                            w -> error ("bad expra id: " ++ show w)
                        exa = fp.exprs.[n]
                        x0 = exa.alts.length `div` 2
                        pats = [ pref exa.alts.[i] | i <- enumFromTo 0  (x0-1) ]
                        exps = [ xref exa.alts.[i] | i <- enumFromTo x0 (exa.alts.length-1) ]
                        calt (pat, ex) = do
                                pat <- U.pReturn pat        -- make sure it has numbers
                                syms <- mapSt U.mkLocal (U.patVars pat)
                                mkStrictPVars pat
                                ex <- U.mapEx true (U.replaceLocals syms) ex
                                stio CAlt {pat, ex}
                        mkStrictPVars PCon{pats} = foreach pats mkStrictPVars
                        mkStrictPVars PUser{pat,lazy}
                            | PVar{pos,uid,var} <- pat = do
                                sym <- U.findV (Local {base=var, uid})
                                U.changeSym sym.{state=StrictChecked, strsig=if lazy then U else S[]}
                            | otherwise          = mkStrictPVars pat
                        mkStrictPVars PAnn{pat}  = mkStrictPVars pat
                        mkStrictPVars PAt{pat}   = mkStrictPVars pat
                        mkStrictPVars PLit{}     = return ()
                        mkStrictPVars PVar{}     = return ()
                        mkStrictPVars PMat{}     = return ()
                        mkStrictPVars PConFS{}   = undefined 
                        xref i = case lookup t i of
                            Just x -> x
                            Nothing -> error ("illegal xref " ++ show i  ++ " in expr#"
                                        ++ show n ++ ", xkind=" ++ show exa.xkind)
                        x2p :: Expr -> Pattern
                        x2p (Vbl {pos, name = Local u n}) = PVar {pos, uid = u, var = n}
                        x2p (Lit {pos, kind, value})    = PLit {pos, kind, value}
                        x2p (Con {pos, name})           = PCon {pos, qname = name, pats=[]}
                        x2p (Ann {ex,typ=Just sig}) = PAnn {pat = x2p ex, typ = sig}
                        x2p (app@App _ _ _) = case map fst (U.flatx app) of
                            (Con {name}:args) -> PCon {pos=Position.null, qname=name, pats = map x2p args}
                            [Vbl {name=VName _ "!"}, x] -> PUser {pat=x2p x, lazy = false}
                            [Vbl {name=VName _ "?"}, x] -> PUser {pat=x2p x, lazy = true}
                            [Vbl {name=VName _ "@"}, v1, v2] -> PAt {pos=Position.null, uid = 0, var=p1.var, pat=p2}
                                where p1 = x2p v1; p2 = x2p v2
                            [Vbl {name=VName _ "~"}, v1, v2] -> PMat {pos=Position.null, uid = 0, var=p1.var, value}
                                where p1 = x2p v1; value = v2.value
                            sonst -> error ("x2p: illegal expr " ++ nice app g)
                        x2p ex = error("x2p: illegal expr " ++ nice ex g)
                        pref i = x2p (xref i)
            xtree <- foldM rebuildEx Nil (enumFromTo 1 (fp.exprs.length-1))
            U.logmsg TRACE2 pos (text ("reconstructed " ++ show fp.taus.length ++ " tau types"))
            U.logmsg TRACE2 pos (text ("reconstructed " ++ show fp.rhos.length ++ " rho types"))
            let nExpr i = maybe abort id (xtree.lookup i)
                    where abort = error ("unknown expr index " ++ show i)
            let strMB "" = Nothing
                strMB s  = Just s
            let rbSymA n = SymA {sid=0, pos=mkpos sym.offset sym.name.base, vis, 
                    doc  = strMB sym.doc,
                    name = rebuildQN sym.name,
                    typ = nSigma sym.typ,
                    kind = nKind sym.kind,
                    vars = [ nTau (sym.vars.[i]) | i <- enumFromTo 0 (sym.vars.length-1) ]}
                  where sym = fp.symas.[n]
                        vis = if sym.publik then Public else Protected
                rbSymV :: CT.SymVArr -> Int -> Symbol
                rbSymV arr n = SymV {sid=0, pos=mkpos sym.offset sym.name.base, vis=v, doc=strMB sym.doc,
                    name = rebuildQN sym.name, typ = nSigma sym.sig, pur = sym.pur,
                    nativ = if sym.nativ == "" then Nothing else Just sym.nativ,
                    expr = rbExpr sym.expr,
                    anno = true, state = StrictChecked, exported = sym.expr != 0,
                    strsig = decodeS sym.stri,
                    depth = sym.depth, rkind = BitSet{set=fromInt sym.rkind},
                    throwing = [ nTau (sym.throwing.[i]) 
                                    | i <- enumFromTo 0 (sym.throwing.length-1) ] }
                  where sym = arr.[n]
                        v = if sym.abst then Abstract else if sym.publik then Public else Protected
                rbExpr 0 = Nothing
                rbExpr ix = Just (nExpr ix)
                rbSymD :: CT.SymDArr -> Int -> Symbol
                rbSymD arr n = SymD {sid=0, pos=mkpos sym.offset sym.name.base, vis, doc=strMB sym.doc,
                    name = rebuildQN sym.name, cid = sym.cid,
                    typ = nSigma sym.typ,
                    flds = map mkfield fields,
                    strsig = S [ if f.strict then S[] else U | f::CT.Field <- fields ] }
                  where sym = arr.[n]
                        fields = [ sym.fields.[n] | n <- enumFromTo 0  (sym.fields.length-1) ]
                        mkfield (fld::CT.Field) = Field{pos, name, doc, vis, strict, typ} where
                            pos = case name of
                                Just n  -> mkpos fld.offset n
                                Nothing -> Position.null
                            name = strMB fld.name
                            doc  = strMB fld.doc
                            vis  = if fld.privat then Private else Public
                            strict = fld.strict
                            typ = nSigma fld.sigma
                        vis = if sym.priv then Private else if sym.publik then Public else Protected
                        
                rbSymL :: CT.SymLArr -> Int -> Symbol
                rbSymL arr n = SymL {sid=0, pos=mkpos sym.offset sym.name.base, vis, -- doc=strMB sym.doc,
                    name = rebuildQN sym.name, alias = rebuildQN sym.alias}
                  where sym = arr.[n]
                        vis = if sym.publik then Public else Protected
                rbSymC :: CT.SymC -> Symbol
                rbSymC sym = SymC {sid=0, pos=mkpos sym.offset sym.name.base, vis, doc=strMB sym.doc,
                    name = rebuildQN sym.name,
                    tau  = nTau sym.tau, 
                    supers = sups,
                    insts = zip ins1 ins2,
                    env = Nil}
                  where
                    ins1 = mapqs sym.ins1
                    ins2 = mapqs sym.ins2
                    sups = mapqs sym.sups
                    vis = if sym.publik then Public else Protected
                rebuildClass n = do
                    let sym = fp.symcs.[n]
                    U.enter (rbSymC sym)
                    foreach (enumFromTo 0 (sym.funs.length-1)) (U.enter • rbSymV sym.funs)
                    foreach (enumFromTo 0 (sym.lnks.length-1)) (U.enter • rbSymL sym.lnks)
                rbSymI :: CT.SymI -> Symbol
                rbSymI sym = SymI {sid=0, pos=mkpos sym.offset sym.name.base, 
                    vis=Public, doc=strMB sym.doc,
                    name = rebuildQN sym.name,
                    clas = rebuildQN sym.clas,
                    typ  = nSigma sym.typ,
                    env  = Nil}
                rebuildInst n = do
                    let sym = fp.symis.[n]
                    U.enter (rbSymI sym)
                    foreach (enumFromTo 0 (sym.funs.length-1)) (U.enter • rbSymV sym.funs)
                    foreach (enumFromTo 0 (sym.lnks.length-1)) (U.enter • rbSymL sym.lnks)
                rbSymT :: CT.SymT -> Symbol
                rbSymT sym = SymT {sid=0, pos=mkpos sym.offset sym.name.base,
                    vis = if sym.publik then Public else Protected, doc=strMB sym.doc,
                    name = rebuildQN sym.name,
                    typ  = nSigma sym.typ, product = sym.prod, enum = sym.isEnum,
                    nativ = if sym.nativ == "" then Nothing else Just sym.nativ,
                    pur = sym.pur, newt = sym.newt,
                    kind = nKind sym.kind,
                    env  = Nil}
                rebuildTyp n = do
                    let sym = fp.symts.[n]
                    let rsym = rbSymT sym
                    U.enter rsym
                    foreach (enumFromTo 0 (sym.cons.length-1)) (U.enter • rbSymD sym.cons)
                    foreach (enumFromTo 0 (sym.funs.length-1)) (U.enter • rbSymV sym.funs)
                    foreach (enumFromTo 0 (sym.lnks.length-1)) (U.enter • rbSymL sym.lnks)
                    case rsym.nativ of
                        Just nativ -> U.nativeType nativ rsym.name
                        nothing    -> return ()


            forsome (enumFromTo 0 (fp.symas.length-1)) (U.enter • rbSymA)
            forsome (enumFromTo 0 (fp.symcs.length-1)) rebuildClass
            forsome (enumFromTo 0 (fp.symis.length-1)) rebuildInst
            forsome (enumFromTo 0 (fp.symts.length-1)) rebuildTyp
            forsome (enumFromTo 0 (fp.symvs.length-1)) (U.enter • rbSymV fp.symvs)
            forsome (enumFromTo 0 (fp.symls.length-1)) (U.enter • rbSymL fp.symls)
            stio (Just fp)

rebuildQN :: CT.QName -> QName
rebuildQN qn = case qn.kind of
    0 -> tname
    1 -> VName (Pack.new qn.pack) qn.base
    2 -> MName tname qn.member
    k -> error ("illegal QName kind in CT:QName " ++ show (k, qn.pack, qn.base, qn.member))
  where
    tname = TName (Pack.new qn.pack) qn.base


mapqs :: CT.QNameArr -> [QName]
mapqs xs = [ rebuildQN qn | i <- enumFromTo 0 (xs.length-1), qn = xs.[i] ]

{--
    Insert the basic definitions that we can't write in sourcecode in the symbol table.
    
    > data () = ();
    > data [] a = [] | a `:` [a];
    > data (,) a b = (a,b)     # tuples 2 to 26
    > data (->) a b;
        
 -}
preludeBasics = do
    g <- getST
    let strict = U.strictMode g
    -- ()
    let unitT  = TName pPreludeBase "()"
        unitC  = MName unitT "()"
        unitCA = VName pPreludeBase "()"
        unitTy = ForAll [] (RhoTau [] (TCon Position.null unitT))
        -- sigmaRhoTau xs t = ForAll xs (RhoTau [] t)
    U.enter (SymT {name = unitT, typ=unitTy, env = Nil, nativ = Nothing,
                product = true, enum = true, pur = false, newt = false,
                kind = KType,
                sid=0, pos=Position.null, vis=Public, doc=Just "Unit type"})
    U.enter (SymD {name = unitC, typ=unitTy, flds = [], cid = 0,
                sid=0, pos=Position.null, vis=Public, doc=Just "Unit value",
                strsig = U})
    U.enter (SymL {name = unitCA, alias = unitC,
                sid=0, pos=Position.null, vis=Public})
    -- [], a:as
    let listT    = TName pPreludeBase "[]"
        listNil  = MName listT "[]"
        listCons = MName listT ":"
        va       = TVar Position.null KType "a"
        vb       = TVar Position.null KType "b"
        listRho  = RhoTau [] (TApp (TCon Position.null listT) va)
        listTy   = ForAll [("a", KType)] listRho
        consTy   = ForAll [("a", KType)] (RhoFun []
                                    (ForAll [] (RhoTau [] va))
                                    (RhoFun []
                                        (ForAll [] listRho)
                                        listRho))
    -- tuples
    U.enter (SymT {name = listT, typ = listTy, env = Nil, nativ = Nothing,
                product = false, enum = false, pur = false, newt = false,
                kind = Kind.unary,
                sid=0, pos=Position.null, vis=Public, doc=Just "list type"})
    U.enter (SymD {name = listNil, typ = listTy, flds = [], cid=0,
                sid=0, pos=Position.null, vis=Public, doc=Just "empty list",
                strsig = U})
    U.enter (SymD {name = listCons, typ = consTy, cid=1,
                   flds = [ aField strict (ForAll [] (RhoTau [] va)),
                            aField false listTy],
                   sid=0, pos=Position.null, vis=Public, doc=Just "list construction",
                   strsig = U})
    U.enter (SymL {name = VName pPreludeBase "[]", alias = listNil,
                   sid=0, pos=Position.null, vis=Public})
    U.enter (SymL {name = VName pPreludeBase ":", alias = listCons,
                   sid=0, pos=Position.null, vis=Public})
    foreach (enumFromTo 2 26) (tupletype strict)

    -- ->
    let funTy = ForAll [("a", KType), ("b", KType)] (RhoTau [] (Tau.tfun va vb))
        funT  = TName pPreludeBase "->"
    U.enter (SymT {name = funT, typ = funTy, env = Nil, nativ = Nothing,
                    product = false, enum = false,
                    kind = Kind.fun,
                    pur = false, newt = false, sid=0, pos=Position.null, vis=Public, doc=Just "function"})
  where
    -- unnamed, undocumented field, strictness and type must be given
    aField = Field Position.null Nothing Nothing Public
    mvar :: Tau
    mvar = TVar Position.null KType ""
    vars  = map ctos (enumFromTo 'a'  'z')
    varks = zip vars (repeat KType)
    tvars = map (mvar.{var=} :: String -> Tau) vars
    commas = repeat ','
    tuple n = "(" ++ packed (take (n-1) commas) ++ ")"
    tupletype strict n = do
        let name = tuple n                          -- "(,)"
            tvs  = take n tvars                     -- TVar 1 "a", TVar 1 "b", ...
            -- vs   = take n vars                      -- "a", "b", ...
            vks  = take n varks                     -- (a::*, b::*, c::*, ....)
            sigmas = map (ForAll [] • RhoTau []) tvs   -- ForAll (RhoTau (TVar 1 "a")), ...
            flds   = map (aField strict) sigmas       -- (Nothing, a), (Nothing, b)
            tupleT   = TName pPreludeBase name          -- Prelude.(,)
            tupleC   = MName tupleT   name          -- Prelude.(,).(,)
            tupleRho = RhoTau [] (Tau.mkapp (TCon Position.null tupleT) tvs)   -- (a,b,...)
            tupleSig = ForAll vks tupleRho              -- forall a b....(a,b, ...)
            conRho   = foldr (RhoFun []) tupleRho sigmas      -- a -> b -> ... -> (a,b, ...)
        U.enter (SymT {name = tupleT, typ = tupleSig, env = Nil, nativ = Nothing,
                        product = true, enum = false, kind = Kind.kind n,
                        sid=0, pos=Position.null, vis=Public, doc=Just (show n ++ "-tuple"),
                        pur = false, newt = false})
        U.enter (SymD {name = tupleC, typ = ForAll vks conRho, flds = flds, cid=0,
                        sid=0, pos=Position.null, vis=Public, doc=Just (show n ++ "-tuple constructor"),
                        strsig = U})
        U.enter (SymL {name = VName pPreludeBase name, alias = tupleC,
                        sid=0, pos=Position.null, vis=Public})

