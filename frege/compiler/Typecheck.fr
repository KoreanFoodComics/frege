{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
 *
 * This code is inspired by the type checker found in the 2004 version of the paper
 * /Prectical type inference for arbitrary-rank types/ by Simon Peyton Jones.
 *
 * In addition to higher ranked polymorphism for the full frege language,
 * the type checker infers and checks also class constraints.
 *
 * In contrast to earlier Frege versions, I gave up quantifying
 * un-annotated local let bindings.
 * For a rationale see the paper /Let Should Not Be Generalised/
 * ("http://research.microsoft.com/en-us/um/people/simonpj/papers/constraints/let-gen.pdf")

 * It is possible to obtain a quantified type by writing annotations for
 * local bindings. However, often when a quantified type is possible, no references
 * to other local bindings exist, in which case the local binding will have been lifted
 * to the top level. This is entirely transparent for the user, there is no way to
 * tell if a local binding has been lifted except by looking at the trace or the
 * generated java code.
 *
 *
 * Requirements to obey:
 *  - 'tcRho' (which is invoked by 'checkRho' and 'inferRho') must ultimatively call 'instRho'
 *  - the expression passed to 'tcRho' et al. must be replaced by the resulting expression.
 *
 * This will ensure the following invariants:
 *  - the result of 'tcRho' is an 'Expr', whose 'Expr.typ' 'isJust'. The expression
 *    passed to tcRho is invalid and must not be used anymore.
 *  - the 'Rho'  in the typechecked expression contains all constraints collected from
 *    lower level expressions. A 'RhoFun' has the constraints from its subtypes merged
 *    with its own constraints in the 'Rho.context' field.
 *
 * Hence, constraint collection for an 'Expr' is a matter of fetching the context fields of
 * the types of the next level subexpressions, if any, and merging them with the own context.
 * This way, no deep fold over the whole expression is needed.
 *
 -}
{-
 * $Author: ingo.wechsung@googlemail.com $
 * $Revision: 639 $
 * $Date: 2012-05-05 19:41:49 +0200 (Sa, 05 Mai 2012) $
 * $Id: Typecheck.fr 639 2012-05-05 17:41:49Z ingo.wechsung@googlemail.com $
 *
 -}

package frege.compiler.Typecheck where

--- This is $Revision: 639 $
protected version = v "$Revision: 639 $" where
    v (m ~ #(\d+)#) | Just g <- m.group 1 = g.atoi
    v _ = 0


import frege.List (Tree, values, lookup, insertkv, insert, update, keys, including, union, contains)

import frege.compiler.Data
import frege.compiler.Nice          except (group, break)
import frege.compiler.Utilities     as U(pSigma, findC, findD, findV, freeTVars,
                                            mapEx, changeSym)

import frege.compiler.TCUtil
import frege.compiler.Javatypes


post = stio true

--- construct a tree of all our member functions
memberTree = do
    g <- getST
    let envs = g.thisTab : [ Symbol.env sy | sy <- values g.thisTab, Symbol.{env?} sy ]
        mems = fold ins Nil [ sy | env <- envs, sy@SymV {name=MName _ _} <- values env, sy.our g]
        ins t sy
            | Just list <- lookup t b = if sy `elem` list then t else update t b (sy:list)
            | otherwise = insert t b [sy]
            where b = (Symbol.name sy).base
    stio mems

--- collect all variable symbols and their dependencies
pass = do
    U.logmsg TRACET Position.null (text "start type check pass")
    mtree <- memberTree
    ourvars <- U.allourvars

    let
        fundep (SymV {name, expr=Just x})  = do
            g <- getST
            deptree <- U.ourGlobalFuns mtree x
            let dep = [ Symbol.name sy | sy <- keys deptree, Symbol.our sy g,
                            -- leave annotated symbols and symbols with sigmas out
                            sy.{expr?} && U.isPSigma sy.typ || not sy.{expr?}   ]
            stio (name, dep)
        fundep (SymV {name, expr=Nothing}) = stio (name, [])
        fundep other = do
            g <- getST
            U.fatal other.pos (text ("fundep: strange symbol: " ++ other.nice g))

    names <- mapSt fundep ourvars

    let groups = U.tsort names

    g <- getST
    U.logmsg TRACET Position.null (text  ("names: " ++ joined " " (map (flip QName.nice g • fst) names)))
    U.logmsg TRACET Position.null (text ("groups: " ++ display (map (map (flip QName.nice g)) groups)))

    annotateMain

    checkgroups groups

    g <- getST
    when (g.errors == 0) checkMain      -- look if there is a main function and check if the type is ok

    stio ("functions", length names)

tc n = TCon {pos=Position.null, name=TName pPreludeBase n}

mainSigma = ForAll [] (RhoFun [] (ForAll [] (RhoTau [] strings)) (RhoTau [] iovoid))
    where
        strings = TApp (tc "[]") tauString          -- [String]
        iovoid = TApp (TApp (tc "ST") (tc "RealWorld")) (tc "()")

{--
 * make sure that, for example,  @main _ = return ()@ is not rejected later because of
 * inferred type @forall a m Monad m . a -> m ()@
 -}
annotateMain = do
    g <- getST
    case (VName g.thisPack "main").findit g of
        Just sym | sym.name.pack == g.thisPack,
                   not sym.anno = U.changeSym sym.{typ = mainSigma, anno = true}
        _ -> stio ()

checkMain = do
    g <- getST
    case (VName g.thisPack "main").findit g of
        Just sym | sym.name.pack == g.thisPack -> do
            let m = Vbl {pos = sym.pos, name = sym.name, typ = Just pSigma}
            checkAnnotated m mainSigma
            gnew <- getST
            when (g.errors < gnew.errors) do
                U.error sym.pos (msgdoc ("The main function must have type [String] -> IO ()"))
            when (g.errors == gnew.errors && not (null sym.typ.rho.context)) do
                U.error sym.pos (msgdoc ("The main function type must not have type class constraints."))
        _ -> stio ()
--- type check one group after the other as long as there are fewer than 7 errors
checkgroups [] = stio ()
checkgroups (g1:gs) = do
    g <- getST
    cancel <- doio g.sub.cancelled
    when (not cancel && g.errors < 7) do
        U.logmsg TRACET Position.null (text ("typechecking group: " ++ joined " " (map (flip QName.nice g) g1)))
        checkgroup  g1
        checkgroups gs

checkgroup nms = do
    -- g <- getST
    syms <- mapSt findV nms
    -- we set up typEnv with the names of the group members so that 'envTvs' will find them
    changeST Global.{typEnv <- (nms ++)}

    -- with Nil do
        -- sequence_ enterChecked
        -- foreach syms (\sym -> U.linkq (Local (show (Symbol.sid sym))) sym)
    foreach nms checkName
    syms <- mapSt findV nms
    when (length syms > 1 || any ((==Recursive) • Symbol.state) syms)
            (foreach nms checkName)
    changeST Global.{typEnv <- drop (length nms)}
    g <- getST
    when (length g.typEnv == 0)  do
        quantifyMany nms
    when (length g.typEnv > 0 && length nms == 1) do
        quantifyOne nms
    foreach nms verbose
    foreach nms typeSanity
    g <- getST
    when (g.errors == 0 && length g.typEnv == 0) (foreach nms substInstMethod)
    -- changeST Global.{checking=g.checking}
  where
    verbose nm = do
        g <- getST
        sym <- findV nm
        let sig = Symbol.typ sym
        U.explain (Symbol.pos sym) (text (sym.nice g ++ " :: " ++ sig.nicer g))
    typeSanity nm = do
        sym <- findV nm
        checkAmbiguous sym sym.typ
        checkReturn    sym sym.typ
        removeCheckedCtx sym sym.typ

checkAmbiguous sym (ForAll bnd r) = do
        let ra = r.{context=[]}                     -- ctx => rho    --> rho
            rb = (rhoInt).{context=r.context}       -- Int           --> ctx => Int
            va = freeTVars [] ra
            vb = freeTVars [] rb
            bad = filter (`notElem` va) vb
        if null bad then stio ()
          else do
            g <- getST
            U.error (Symbol.pos sym) (msgdoc ("Ambiguous type "
                    ++ nicer r g ++ " in " ++ nice sym g))
            U.hint  (Symbol.pos sym) (msgdoc ("It is not clear at what types to instantiate "
                    ++ (if length bad == 1 then "type variable " else "type variables ")
                    ++ joined ", " bad ++ " that "
                    ++ (if length bad == 1 then "occurs" else "occur")
                    ++ " in the context, but not in the type."))
            U.hint  (Symbol.pos sym) (msgdoc ("This can happen through constructs like (Enum.ord • Enum.from) "
                    ++ " where a class context is both introduced and eliminated locally so "
                    ++ "that a caller can not know which type is meant."))
checkReturn :: Symbol -> Sigma -> StG ()
checkReturn sym sigma =
    case U.returnType sigma.rho of
        (_, []) -> stio ()
        (t, ss) -> do
            let svars = [ v | ForAll bs br <- ss, v <- U.freeTVars bs br ]
                        ++ keys (U.freeCtxTVars [] Nil sigma.rho.context)
                tvars = case t of
                    TVar {pos} -> [t.var]
                    TApp _ _ | (TVar {var}:_) <- t.flat = [var]
                    _ -> []
            if all (`elem` svars) tvars then stio ()
              else do
                g <- getST
                U.warn (sym.pos) (msgdoc ("application of " ++ sym.name.nice g ++ " will diverge."))
removeCheckedCtx :: Symbol -> Sigma -> StG ()
removeCheckedCtx sym sigma
    | any Context.checked sigma.rho.context =
      U.changeSym sym.{typ = sigma.{rho <- Rho.{context <- filter (not • Context.checked)}}}
    | otherwise = stio ()

{--
 * look for applications of class member functions in the code of the named item
 * and replace them with instance member functions, if possible.
 *
 -}
substInstMethod :: QName -> StG ()
substInstMethod qname = do
        g <- getST
        -- when (U.isOn g.options.flags OPTIMIZE) do
        sym <- findV qname
        case sym.expr of
            Nothing -> stio ()
            Just x -> do
                x <- mapEx true substInst x
                changeSym sym.{expr = Just x}

--- replace class member with instance member
substInst (vbl@Vbl {pos, name = MName tn bs, typ = Just (ForAll [] rho)})
        -- check if vbl is instaniated to tn
    | [ctx@Ctx {cname, tau}] <- filter ((==tn) • Context.cname) rho.context
    = do
        g <- getST
        tau <- reducedTau tau
        case U.instTauSym tau g of
            Just symt -> do           -- we have a type name
                symc <- findC tn      -- must be a class because it appears in a contexts cname
                case filter ((symt.name ==) • fst) symc.insts of    -- find instance
                    [] -> U.fatal pos (text (symc.nice g ++ " has no instance for " ++ symt.nice g))
                    [(_,iname)]
                        {- | MName iname bs != qname -} -> do
                            mem  <- findV vbl.name
                            imem <- findV (MName iname bs)
                            let nrho = rho.{context <- filter (not • sameCtx ctx)}
                            U.logmsg TRACEO pos (text ("replace " ++ vbl.name.nice g
                                ++ " :: " ++ vbl.typ.nicer g
                                ++ " sigma :: " ++ mem.typ.nicer g
                                ++ "  with  " ++ imem.name.nice g
                                ++ " :: " ++ imem.typ.nicer g
                                ++ " at type " ++ nrho.nicer g))
                            changeST Global.{sub <- SubSt.{
                                idKind <- insertkv (KeyTk vbl.pos.first) (Right imem.name)}}
                            stio (Left vbl.{name=MName iname bs, typ = Just (ForAll [] nrho)})
                        -- | otherwise = do
                        --     U.logmsg TRACEO pos (text ("mustn't substitute " ++ qname.nice g ++ " in its own body."))
                        --     stio (Left vbl)
                    _ -> U.fatal pos (text (symc.nice g ++ " has multiple instances for " ++ symt.nice g))
            _ -> do
                U.logmsg TRACEO pos (text ("no suitable instance: " ++ vbl.nice g ++ " :: " ++ rho.nicer g))
                stio (Left vbl)        -- TVar or Meta
    | otherwise = do
        g <- getST
        U.logmsg TRACEO pos (text ("no suitable constraint: " ++ vbl.nice g ++ " :: " ++ rho.nicer g))
        stio (Left vbl)
substInst x = stio (Left x)


checkName nm = do
    g <- getST
    sym <- findV nm
    sigma <- checkSym sym
    U.logmsg TRACET sym.pos (text ("checkName:  " ++ sym.name.nice g ++ " :: " ++ sigma.nice g))
  where
    checkSym sym = do
        g <- getST
        U.logmsg TRACET (Symbol.pos sym) (text ("typechecking " ++ sym.nice g ++ ", state=" ++ show sym.state))
        case sym of
            SymV {nativ = Just _, typ = t} | not (U.isPSigma t) -> stio t
            SymV {expr = Nothing, name, pos, typ = t}
                | not (U.isPSigma t),
                  MName c _ <- name,
                  Just (SymC {pos}) <- c.findit g = do
                    -- t <- canonicSignature t
                    U.changeSym sym.{state=Typechecked, vis=Abstract}
                    stio t
                | otherwise = do
                    U.error pos (msgdoc ("implementation missing for " ++ show sym.name))
                    U.changeSym sym.{state=Typechecked}
                    stio t
            SymV {expr = Just x, typ = t}
                | U.isPSigma t,
                  sym.state `elem` [Unchecked, Typechecking, Recursive] = do
                    rho <- approxRho x
                    U.changeSym sym.{state=Typechecking, typ = ForAll [] rho}
                    -- (rho, ex) <- inferRho x
                    ex  <- checkRho x rho
                    rho <- maybe (error "untyped after checkRho") (zonkRho • Sigma.rho) ex.typ
                    sym <- findV sym.name       -- refresh, might be updated meanwhile
                    let newstate = if sym.state != Recursive then Typechecked else Recursive
                        newsig   = if newstate == Recursive
                                        then ForAll [] rho -- why? .{context=[]}
                                        else ForAll [] rho
                    U.changeSym sym.{typ = newsig, expr=Just ex, state = newstate}
                    stio newsig
                -- | other <- sym.state = U.fatal sym.pos ("illegal state " ++ show other
                --                    ++ " while typechecking " ++ sym.nice g)
            -- SymV {expr = Just x, state = Typechecked } = do
            --    U.changeSym sym.{state=Unchecked}
            --    sym <- findV sym.name
            --    checkSym sym
            -- SymV {expr = Just x, sig = Just t, state = Recursive } = stio t
            SymV {expr = Just x, typ = t, state, anno}
                | not (U.isPSigma t), state == Unchecked  = do
                    x <- checkAnnotated x t
                    -- t <- canonicSignature t
                    U.changeSym sym.{state = Typechecked, expr = Just x {-, typ = t-} }
                    stio t
                | not (U.isPSigma t), state == Typechecked && anno = stio t     -- opt: do not recheck annotated
                | not (U.isPSigma t), state == Recursive || state == Typechecked = do
                    (rho, ex) <- inferRho x
                    rho <- zonkRho rho
                    sym <- findV sym.name       -- refresh, might be updated meanwhile
                    let newsig   = ForAll [] rho
                    U.changeSym sym.{typ = newsig, expr=Just ex, state = Typechecked}
                    stio newsig
            wrongsy -> U.fatal wrongsy.pos (text ("checkSym: wrong symbol: " ++ wrongsy.nice g
                ++ ", state=" ++ show wrongsy.state
                ++ ", expr isJust: " ++ show (isJust wrongsy.expr)
                ++ ", typ : " ++ wrongsy.typ.nice g))

quantifyOne nms = do
        g <- getST
        sym <- U.findV (head nms)
        lsyms <- mapSt U.findV g.typEnv
        let rec = [ Symbol.typ sym | sym <- lsyms,
                                    sym <- (Symbol.follow sym g),    -- follow aliases
                                    Symbol.state sym == Recursive]
        when (false && null sym.typ.rho.context && not (U.isFun sym.typ g) && null rec) do
            quantifyWith (quantifiedExcept sym.sid) nms
        stio ()

quantifyMany = quantifyWith quantified
quantifyWith f nms = do
        syms <- mapSt findV nms     -- unquantified symbols
        g <- getST
        unless (null syms) do
            U.logmsg TRACET (head syms).pos (text ("quantify " ++ joined ", " (map (flip QName.nice g) nms)))
            U.explain       (head syms).pos (msgdoc ("quantify " ++ joined ", " (map (flip QName.nice g) nms)))
            -- foreach syms logty
        let qsyms = [ (name, rho) | (sy@SymV {name, expr  = Just _,
                                     nativ = Nothing,
                                     anno  = false,
                                     typ   = (ForAll [] rho)}) <- syms, not (U.isPSigma sy.typ)]
            asyms = [ (name, typ) | sy@SymV {name, expr  = Just _,
                                     nativ = Nothing,
                                     anno  = true, typ} <- syms ]
            -- sigRho (ForAll [] rho) = rho
            rhos = map snd qsyms
            qnms = map fst qsyms
        sigs <- f rhos
        foreach (zip qnms sigs) changeSig
        foreach asyms changeSig
    where
        changeSig (qnm, sigma) = do
            sym <- findV qnm
            case sym of
                SymV {expr = Just x} -> do
                    zex <- zonkExpr x           -- from here on no bound Meta anywhere
                    zex <- zonkRigid (Sigma.bound sigma) zex    -- replace Rigid#nnn a where a is bound
                    sigma <- substRigidSigma (Sigma.bound sigma) sigma
                    changeSym sym.{typ = sigma, expr = Just zex, anno = true}
                    g <- getST
                    U.logmsg TRACET (Symbol.pos sym) (text ("qfy: " ++ sym.nice g ++ " :: " ++ sigma.nicer g))
                    U.explain (Symbol.pos sym) (text (sym.nice g ++ " :: " ++ sigma.nicer g))
                other = Prelude.error "findV behaves badly"


-- zonkRigid []    ex = stio ex
zonkRigid bound ex = do
        g <- getST
        U.logmsg TRACEZ (getpos ex) (text ("zonkRigid " ++ show bound ++ " " ++ nice ex g))
        mapEx false zonk ex
    where
        symWork (symv@ SymV {pos, expr, typ = sig}) = do
                        g <- getST
                        U.logmsg TRACEZ (getpos ex) (text ("symWork: " ++ show (bound ++ sig.bound) ++ " " ++ nice ex g))
                        rho   <- substRigidRho (bound ++ sig.bound) sig.rho
                        expr  <- case expr of
                            Just x  -> do
                                x <- zonkRigid (bound ++ sig.bound) x
                                stio (Just x)
                            Nothing -> stio Nothing
                        changeSym symv.{expr, typ = ForAll sig.bound rho}
        symWork _ = error "symWork: not a variable"

        zonk (x@Let {env,ex,typ = Just sig}) = do
                sig <- substRigidSigma bound sig
                syms <- mapSt U.findV env
                foreach syms symWork
                ex  <- zonkRigid bound ex
                stio (Right x.{ex,typ = Just sig})
        zonk (x@Lam {pat,ex,typ}) = do                  -- update also environment of lambda
            syms <- mapSt U.findV (map U.pVarLocal (U.patVars pat))
            foreach syms symWork
            case Expr.typ x of
                Just sigma -> do
                    sigma <- substRigidSigma bound sigma
                    stio (Left (x.{typ = Just sigma}))
                Nothing -> stio (Left x)
        zonk (Case {ckind,ex,alts,typ}) = do
            ex  <- zonkRigid bound ex
            typ <- case typ of
                Just sigma -> do
                    s <- substRigidSigma bound sigma;
                    stio (Just s)
                Nothing -> stio Nothing
            alts <- mapSt zonkAlt alts
            stio (Right (Case ckind ex alts typ))
          where
            zonkAlt (CAlt {pat,ex}) = do
                syms <- mapSt U.findV (map U.pVarLocal (U.patVars pat))
                foreach syms symWork
                ex  <- zonkRigid bound ex
                stio (CAlt {pat,ex})
        zonk x = case Expr.typ x of
            Just sigma -> do
                sigma <- substRigidSigma bound sigma
                stio (Left (x.{typ = Just sigma}))
            Nothing -> stio (Left x)


zonkExpr x = mapEx false zonk x
    where
        zonk (x@Let {env,typ = Just sig}) = do
                sig <- zonkSigma sig
                syms <- mapSt U.findV env
                foreach syms symWork
                stio (Left x.{typ = Just sig})
            where
                symWork (symv@ SymV {pos, expr = Just ex, typ = sig}) = do
                        sig <- zonkSigma sig
                        ex  <- zonkExpr ex
                        changeSym symv.{expr = Just ex, typ = sig}
                symWork _ = error "symWork: not a variable"
        zonk x
            | Just sig <- Expr.typ x = do
                sig <- zonkSigma sig
                stio (Left x.{typ=Just sig})
            | otherwise = do
                g <- getST
                U.fatal (getpos x) (text ("untyped expression  " ++ x.nice g))

approximate x = do
    rho <- approxRho x
    stio (ForAll [] rho)
approxRho :: Expr -> StG Rho
approxRho (Lam {ex}) = do
    sig <- newSigmaTyVar "arg"
    rho <- approxRho ex
    stio (RhoFun [] sig rho)
approxRho _ = newRhoTyVar "res"


inferRho x = do
    ref    <- doio (IORef.new Nothing)
    x      <- tcRho x (Infer ref)
    result <- doio ref.get
    case result of
        Just r -> stio (r, x)
        Nothing -> U.fatal (getpos x) (text "inferRho: no result")
checkRho x r = tcRho x (Check r)

checkSigma :: Expr -> Sigma -> StG Expr
checkSigma x s = checkSigma1 false x s
checkAnnotated x s = checkSigma1 true x s
checkSigma1 annotated x s = do
    (skolTvs, rho) <- skolemise s
    x <- checkRho x rho
    tvs <- sigmaTvs s
    eTvs <- envTvs 0
    let aTvs   = tvs ++ eTvs
        badTvs = [ tv | tv <- skolTvs, tv `elem` aTvs ]
        pos = getpos x

    g <- getST
    U.logmsg TRACET pos (text ("skolTvs:  " ++ joined ", " (map (flip nice g) skolTvs)))
    U.logmsg TRACET pos (text ("sigmaTvs: " ++ joined ", " (map (flip nice g) tvs)))
    U.logmsg TRACET pos (text ("envTvs:   " ++ joined ", " (map (flip nice g) eTvs)))
    U.logmsg TRACET pos (text ("badTvs: "   ++ joined ", " (map (flip nice g) badTvs)))
    if null badTvs then checkConstraints skolTvs x rho
        else do
            let part1 = text "Type " <+> text (rho.nicer g)
                part2 = text "inferred from  " <+> text (x.nice g) <+/> text " is not as polymorphic as"
                        <+/> text "expected type " <+/> text (s.nicer g)
            U.error pos (part1 </> part2)
            stio x
  where

        -- check constraints
        -- offered type must not be more constrained than expected
        checkConstraints tvs x ety = do
                g <- getST
                ectx <- exContext x
                -- etvs <- mapSt (getTauTvs • Context.tau) ectx
                ety <- canonicContext ety
                etvss <- mapSt ctxTvs ectx

                let pos = getpos x
                U.logmsg TRACET pos (text ("expr context:     "   ++ U.nicectx ectx g))
                U.logmsg TRACET pos (text ("expected context: "   ++ U.nicectx ety.context g))
                -- find constraints that mention skolemised vars that are not in the expected type
                let implies = impliesG g
                    bad = [ ctx |   (ctx,ctvs) <- zip ectx etvss,
                                    annotated || any (`elem` tvs) ctvs,
                                    not (any (`implies` ctx) ety.context) ]

                unless (null bad) do
                    g <- getST
                    let part1 = text "inferred type is more constrained than expected type"
                        part2 = text "inferred: " <+> text ((unJust x.typ).nicer g)
                        part3 = text "expected: " <+> text (nicer ety g)
                    U.error (getpos x) (part1 </> part2 </> part3)
                stio x


inferPat p = do
    ref    <- doio (IORef.new Nothing)
    binds  <- tcPat p (Infer ref)
    result <- doio ref.get
    case result of
        Just s  -> stio s
        Nothing -> U.fatal (getpos p) (text "inferPat: no result")

checkPat p s = tcPat p (Check s)

tcRho :: Expr -> Expected Rho -> StG Expr
tcRho x expty = case expty of
    Infer _  = do
        g <- getST
        U.logmsg TRACET (getpos x) (text ("tcRho Infer  " ++ x.nice g))
        tcRho' x expty
    Check t  = do
        g <- getST
        U.logmsg TRACET (getpos x) (text ("tcRho Check  " ++ x.nice g ++ "  for  " ++ t.nice g))
        tcRho' x expty


rhoFor s = RhoTau [] (TCon {pos=Position.null,name=TName pPreludeBase s})
rhoBool     = rhoFor "Bool"
rhoChar     = rhoFor "Char"
rhoString   = RhoTau [] tauString
rhoInt      = rhoFor "Int"
rhoLong     = rhoFor "Long"
rhoDouble   = rhoFor "Double"
rhoFloat    = rhoFor "Float"
rhoRegex    = rhoFor "Regex"
rhoMatcher  = rhoFor "Matcher"
rhoInteger  = rhoFor "Integer"
tauString   = TApp (tc "StringJ") (tc "Char")

instance Nice Nice z => Maybe z where
    nicer (Just x) g = x.nicer g
    nicer Nothing  g = "Nothing"
    nice x y = nicer x y


tcRho' :: Expr -> Expected Rho -> StG Expr

tcRho' (x@Lit {pos,kind})  ety = case kind of
    LBool   -> instRho x (rhoBool) ety
    LChar   -> instRho x (rhoChar) ety
    LString -> instRho x (rhoString) ety
    LInt    -> instRho x (rhoInt)  ety
    LLong   -> instRho x (rhoLong)  ety
    LBig    -> instRho x (rhoInteger)  ety
    LDouble -> instRho x (rhoDouble)  ety
    LFloat  -> instRho x (rhoFloat)  ety
    LRegex  -> instRho x (rhoRegex)  ety


tcRho' (x@Vbl {name})  ety = do
    sym <- findV name
    case U.isPSigma sym.typ of
        false -> do
            rho <- instantiate sym.typ
            instRho x rho ety
        true -> if sym.state == Unchecked
            then do
                checkName name
                sym <- findV name
                rho <- instantiate sym.typ
                instRho x rho ety
            else if sym.state == Typechecking
                 || sym.state == Recursive then do
                            -- unavoidable in mutual recursive definitions
                            U.changeSym sym.{state=Recursive}
                            rho <- approxRho x
                            instRho x rho ety
                      else do
                        g <- getST
                        U.fatal (getpos x) (text ("tcRho: untyped " ++ x.nice g ++ ", state=" ++ show sym.state))
tcRho' (x@Con {name}) ety = do
    sym <- U.findD name
    rho <- instantiate sym.typ
    instRho x rho ety

tcRho' (x@App a b t) ety = do
    (funty, fun)   <- inferRho a
    (argty, resty) <- unifyFun fun funty
    arg            <- checkSigma b argty
    instRho (App fun arg t) resty ety

tcRho' (x@Case {ex,alts}) ety
    | Infer _ <- ety  = do
        (rho,ex) <- inferRho ex
        (res,alt1) <- tcAlt rho (head alts)
        ralts <- mapSt (checkAlt rho (Check res)) (tail alts)
        instRho x.{ex,alts=alt1:ralts} res ety
    | Check crho <- ety = do
        (rho,ex) <- inferRho ex
        alts <- mapSt (checkAlt rho ety) alts
        let asig = (unJust • Expr.typ • CAlt.ex • head) alts
        instSigma x.{ex, alts} asig ety
    where
        checkAlt rho ety (alt@CAlt {ex,pat})  = do
            checkPat pat (ForAll [] rho)
            ex <- tcRho ex ety
            stio alt.{ex}
        tcAlt rho (alt@CAlt {ex,pat}) = do
            checkPat pat (ForAll [] rho)
            (rho, ex) <- inferRho ex
            stio (rho, alt.{ex})

tcRho' (x@Let {env,ex}) ety = do
    g <- getST
    checkgroup env
    ex <- tcRho ex ety
    instSigma x.{env, ex} (unJust ex.typ) ety

tcRho' (x@Lam {pat,ex}) (ety@Check rho) = do
        (asig, brho) <- unifyFun x rho
        checkPat pat asig
        ex <- checkRho ex brho
        instRho x.{ex} (RhoFun [] asig (unJust ex.typ).rho) ety
tcRho' (x@Lam {}) ety = do
    sigma     <- inferPat x.pat
    (rho, ex) <- inferRho x.ex
    instRho (x.{ex}) (RhoFun [] sigma rho) ety

tcRho' (x@Mem {ex,member}) ety = do
    (rho, ex) <- inferRho ex
    g <- getST
    let pos = getpos x
    case rho of
        RhoFun _ _ _ -> do
            U.error pos (text ("primary expression  " ++ ex.nice g ++ "  must not be a function"))
            wrong <- newRhoTyVar "wrong"
            instRho x.{ex} wrong ety
        RhoTau _ tau -> do
            tau <- reduced tau
            let mpos = Pos member member
            case U.instTauSym tau g of
                Just (SymT {env, nativ})
                    | Just (SymV {name}) <- env.lookup member.value = do
                            changeST Global.{sub <- SubSt.{
                                idKind <- insertkv (KeyTk member) (Right name)}}
                            tcRho (nApp (Vbl mpos name Nothing) ex) ety
                    | Just (SymL {alias}) <- env.lookup member.value = do
                            changeST Global.{sub <- SubSt.{
                                idKind <- insertkv (KeyTk member) (Right alias)}}
                            tcRho (nApp (Vbl mpos alias Nothing) ex) ety
                    | Just s <- nativ,          -- it's a native type
                      -- traceLn ("nativ " ++ s) || true,
                      ss <- s:U.supersOfNativ s g,     -- the supertypes of s (including s)
                      -- traceLn ("supers " ++ show ss) || true,
                      qns <- [ q | s <- ss, q <- U.typesOfNativ s g ],
                      -- traceLn ("types " ++ show qns) || true,
                      h:_ <- [ h | q <- qns, h <- (MName q member.value).findit g ] = do
                            let m = case h of
                                        SymV {name}  -> name
                                        SymL {alias} -> alias
                                        _ -> error "no symbol or alias"
                            changeST Global.{sub <- SubSt.{
                                idKind <- insertkv (KeyTk member) (Right m)}}
                            tcRho (nApp (Vbl mpos m Nothing) ex) ety
                other | Just (m@SymV {name=MName clas _}) <- (VName g.thisPack member.value).findit g,
                        Just (SymC {tau}) <- clas.findit g = do
                            changeST Global.{sub <- SubSt.{
                                idKind <- insertkv (KeyTk member) (Right m.name)}}
                            tcRho (nApp (Vbl mpos m.name Nothing) ex) ety
                sonst -> do
                    U.error (getpos x) (text "can't find a type for " <+/> text (x.nicer g)
                        <+/> text "`" <> text member.value <> text "`"
                        <+/> text "is neither an overloaded function nor a member of "
                        <+/> text (rho.nicer g))
                    wrong <- newRhoTyVar "wrong"
                    instRho x.{ex} wrong ety

tcRho' (x@Ifte a b c _) (ety@Infer _) = do
    a <- checkRho a (rhoBool)
    (r,b) <- inferRho b
    c <- checkRho c r
    instRho (Ifte a b c Nothing) r ety

tcRho' (x@Ifte a b c _) (ety@Check erho) = do
    a <- checkRho a (rhoBool)
    b <- checkRho b erho
    c <- checkSigma c (unJust b.typ)
    instSigma (Ifte a b c Nothing) (unJust c.typ) ety

tcRho' (x@Ann ex (Just s)) ety  = do         -- a genuine forall, should be rare
    ex <- checkAnnotated ex s
    instSigma ex s ety
    -- instSigma ex (unJust ex.typ) ety         -- we don't want to see Ann after typechecking anymore

tcRho' x (Check _) = do
    g <- getST
    U.fatal (getpos x) (text ("can't tcRho (check): " ++ x.nice g))
tcRho' x (Infer _) = do
    g <- getST
    U.fatal (getpos x) (text ("can't tcRho (infer): " ++ x.nice g))


tcPat p expty = case expty of
    Infer _  = do
        g <- getST
        U.logmsg TRACET (getpos p) (text ("tcPat Infer  " ++ p.nice g))
        tcPat' p expty
    Check s  = do
        g <- getST
        U.logmsg TRACET (getpos p) (text ("tcPat Check  " ++ p.nice g ++ "  for  " ++ s.nice g))
        tcPat' p expty

sigFor s = ForAll [] (RhoTau [] (TCon {pos=Position.null,name=TName pPreludeBase s}))
sigBool    = ForAll [] rhoBool
sigChar    = ForAll [] rhoChar
sigString  = ForAll [] rhoString
sigInt     = ForAll [] rhoInt
sigLong    = ForAll [] rhoLong
sigInteger = ForAll [] rhoInteger
sigDouble  = ForAll [] rhoDouble
sigFloat   = ForAll [] rhoFloat
sigRegex   = ForAll [] rhoRegex
sigMatcher = ForAll [] rhoMatcher

litSigma LBool      = sigBool
litSigma LChar      = sigChar
litSigma LString    = sigString
litSigma LInt       = sigInt
litSigma LLong      = sigLong
litSigma LBig       = sigInteger
litSigma LDouble    = sigDouble
litSigma LFloat     = sigFloat
litSigma LRegex     = sigRegex

tcPat' (p@PLit {pos,kind})  ety = case kind of
    LBool   -> instPatSigma p (sigBool) ety
    LChar   -> instPatSigma p (sigChar) ety
    LString -> instPatSigma p (sigString) ety
    LInt    -> instPatSigma p (sigInt)  ety
    LLong   -> instPatSigma p (sigLong)  ety
    LBig    -> instPatSigma p (sigInteger) ety
    LDouble -> instPatSigma p (sigDouble) ety
    LFloat  -> instPatSigma p (sigFloat) ety
    LRegex  -> instPatSigma p (sigString) ety

tcPat' (p@PVar {uid,var}) (ety@Check sig) = do
    sym <- findV (Local{uid, base=var})
    -- U.logmsg TRACET p.pos (text("lookup PVar{uid=" ++ show uid ++ "} --> " ++ show sym.name))
    case U.isPSigma sym.typ of
        true  -> do  U.changeSym sym.{typ=sig, state=Typechecked}
                     instPatSigma p sig ety
        false -> instPatSigma p sym.typ ety

tcPat' (p@PVar {uid,var}) ety = do
    sym <- findV (Local{uid, base=var})
    -- U.logmsg TRACET p.pos (text("lookup PVar{uid=" ++ show uid ++ "} --> " ++ show sym.name))
    case U.isPSigma sym.typ of
        true -> do
            sig <- newSigmaTyVar var
            U.changeSym sym.{typ = sig, state = Typechecked}
            instPatSigma p sig ety
        false -> instPatSigma p sym.typ ety

tcPat' (p@PMat {pos,uid,var}) ety = do
    checkPat (PVar {pos,uid,var}) sigMatcher
    instPatSigma p sigString ety

tcPat' (p@PCon {qname,pats}) ety = do
    sym <- findD qname
    rho <- instantiate sym.typ
    let spRho (RhoFun _ s r) = case spRho r of
            (args, ret) -> (s:args,ret)
        spRho rhotau = ([], rhotau)
    case spRho rho of
        (!sigs, !res) = do
            mapSt (\(p,s) -> checkPat p s) (zip pats sigs)
            instPatSigma p (ForAll [] res) ety

tcPat' (p@PAnn {pat,typ}) ety = do
    checkPat pat typ
    instPatSigma p typ ety

tcPat' (p@PStrict {pat}) ety = tcPat' pat ety

tcPat' (p@PAt {pos,uid,var,pat}) (ety@Infer _) = do
    sig <- inferPat pat
    checkPat (PVar {pos,uid,var}) sig
    instPatSigma p sig ety
tcPat' (p@PAt {pos,uid,var,pat}) (ety@Check sig) = do
    checkPat pat sig
    checkPat (PVar {pos,uid,var}) sig
    instPatSigma p sig ety

tcPat' p _ = do
    g <- getST
    U.fatal (getpos p) (text ("can't tcPat:  " ++ p.nice g))

