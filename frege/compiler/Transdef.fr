{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}
{--
 * Translate definitions, expressions and types to internal form with internal names
 -}

package frege.compiler.Transdef where


import frege.List (insert, lookup, values, keys, Tree, insertkv)
import Data.List  as DL(find, unique, sortBy, groupBy)

import frege.compiler.Data
import frege.compiler.Utilities     as U(resolveVName, resolveXName, transSigma, transTau,
                                            validSigma, defaultXName)
import frege.compiler.Fixdefs       as F()
import frege.compiler.Enter         as E()
import frege.compiler.Nice (text, msgdoc, fill)
import frege.compiler.Javatypes     as J()
import frege.compiler.Kinds         as K(kiTypes)

post =  stio true

foox = break

pass = do
    g <- getST
    forsome g.definitions (transdef [] (VName g.thisPack))
    c <- doio g.sub.cancelled
    when c (changeST Global.{sub <- SubSt.{definitions=[]}})         -- save space?
    unless c inlineCandidates
    c <- doio g.sub.cancelled
    g <- getST
    unless c (foreach (keys g.javaEnv) J.findAllSupers)
    kiTypes                                         -- kind inference on types    
    stio ("definitions", length g.definitions)

--- translate inline candiates from exporting package clause to QNames and set exported flag in corresponding symbols
inlineCandidates = do
        g <- getST
        rslvd <- mapM (toQ g.thisPack) g.sub.toExport
        g <- getST
        when (g.errors == 0) do
            syms <- mapM U.findV rslvd
            forsome syms (U.changeSym • Symbol.{exported=true})
            let zs = zip syms g.sub.toExport
            forsome [ (s,p) | (s,p) <- zs, not (Symbol.our s g) || isNothing (Symbol.expr s) ] notOurCode
        return ()
    where
        notOurCode (sym, p) = do
            g <- getST
            U.warn (Pos (SName.id p) (SName.id p)) 
                (text ("Cannot export code of " ++ nicer sym g 
                    ++ (if Symbol.our sym g 
                            then " because it has none."            -- no code
                            else " because defined elsewhere.")     -- not our
                    ))
            
        toQ pack sname = resolveVName (VName pack) pos sname 
            where
                !pos = Pos sid sid
                !sid = SName.id sname

findLocal :: [QName] -> String -> QName
findLocal [] name = Local 0 name
findLocal (qn:qns) name
    | qn.base == name = qn
    | otherwise = findLocal qns name

transdef env fname (ImpDcl {pos}) = stio () -- Nothing
transdef env fname (FixDcl {pos}) = stio () -- Nothing
{-ClaDcl    {pos::Line, vis::Visibility, name::String,
                    clvar::TauT t, supers::[t],
                    defs::[Definition q t s], doc::Maybe String}-}
transdef env fname (d@ClaDcl {pos}) = do
        g <- getST
        let tname = TName g.thisPack d.name
        case tname.findit g of
            Nothing -> do U.fatal pos (text ("Cannot happen, class "
                                    ++ tname.nice g ++ " missing."))
                          -- stio Nothing
            Just sym
                | SymC {pos} <- sym = do transclass d sym -- ; stio (Just d)
                | otherwise = do
                    U.fatal pos (text ("expected class, found " ++ sym.nice g))
                    -- stio Nothing
{-
    AnnDcl    {pos::Line, vis::Visibility, name::String, typ::SigmaT t, doc::Maybe String}
    SymV  {pos::Line, vis::Visibility, doc::Maybe String, name ::QName,
                 typ::Sigma, expr::Maybe Expr, nativ::Maybe String,
                 pur::Bool, anno::Bool} /// variable
-}
transdef env fname (d@AnnDcl {pos}) = do
        g <- getST
        let aname = if null env then fname d.name else findLocal env d.name
        case QName.findit aname g of
            Nothing -> do U.fatal pos (text ("Cannot happen, function " ++ aname.nice g ++ " missing"))
            Just sym
                | SymV {pos} <- sym = do
                    t <- transSigma d.typ
                    U.changeSym sym.{typ = t, anno=true}
                    U.logmsg TRACE5 pos (text ("function " ++ aname.nice g ++ " = " ++ t.nice g))
                | otherwise = U.fatal pos (text ("expected function, found " ++ sym.nice g))
transdef env fname (d@NatDcl {pos}) = do
        g <- getST
        let aname = fname d.name
        case QName.findit aname g of
            Nothing -> do U.fatal pos (text ("Cannot happen, function " ++ aname.nice g ++ " missing"))
            Just sym
                | SymV {pos} <- sym = do
                    t <- transSigma d.typ
                    thrs <- mapM transTau d.throwing
                    U.changeSym sym.{typ = t, throwing = thrs}
                | otherwise = U.fatal pos (text ("expected function, found " ++ sym.nice g))

{-
transdef [] fname (d@FunDcl {poss,name=´^let\$´}) = do     -- top level let binding
        g <- getST
        let nm = fname d.name
            patnames = (map (fname • Pattern.var) • U.patVars • head) d.pats
            var = Vbl {pos = pos.change VARID nm.base,
                        name=Simple pos.first.{tokid=VARID, value=nm.base}, typ=Nothing}
            vnm = Vbl {pos = var.pos, name=nm, typ=Nothing}
        {- on top level, transform conservatively -}

        -- let$u = x
        x <- transExpr [] fname d.expr
        U.logmsg TRACE5 pos (text (nm.nice g ++ " = " ++ x.nice g))
        U.enter (sym nm x)
        -- foreach a in patnames let a = case let$u of (a,b) -> a
        foreach patnames (caseex var (head d.pats))
    where
        pos = head poss
        sym nm x = (U.vSym pos nm).{vis=Private, doc=d.doc, expr=Just x}
        caseex var pat nm = do
            g <- getST
            sym <- U.findV nm
            let cas = Case CNormal var [alt] Nothing
                pos = sym.pos.change VARID sym.name.base
                snm = Simple pos.first
                alt = CAlt {pat, ex=Vbl pos snm Nothing}
            x <- transExpr [] fname cas
            U.logmsg TRACE5 sym.pos (text (sym.nice g ++ " = " ++ x.nice g))
            U.changeSym sym.{expr = Just x}
    
transdef env fname (d@FunDcl {poss,name=´^let\$´}) = do        -- local level let binding
        g <- getST
        -- u <- U.uniqid
        let nm = (findLocal env d.name)
            patnames = (map U.pVarLocal • U.patVars • head) d.pats
            var = Vbl {pos = pos.change VARID nm.base,
                        name=Simple pos.first.{tokid=VARID, value=nm.base}, typ=Nothing}
            vnm = Vbl {pos = var.pos, name=nm, typ=Nothing}
        -- let$u = \(a,b) -> x, so we can recover it later
        x <- transExpr env fname (Lam (head d.pats) d.expr Nothing)
        U.logmsg TRACE5 pos (text (nm.nice g ++ " = " ++ x.nice g))
        U.enter (sym nm x)
        -- provisionally  a = let$u, b = let$u
        foreach patnames (provisional vnm)
    where
        pos = head poss
        sym nm x = (U.vSym pos nm).{vis=Private, doc=d.doc, expr=Just x}
        provisional x nm = do
            g <- getST
            sym <- U.findV nm
            U.logmsg TRACE5 sym.pos (text (sym.nice g ++ " = " ++ x.nice g))
            U.changeSym sym.{expr = Just x}
-}

transdef env fname (d@FunDcl {poss}) = do
        let pos = head poss
        g <- getST
        let aname = if null env then fname d.name else findLocal env d.name
        U.logmsg TRACE5 pos (text("transdef: env=" ++ show env ++ ", aname=" ++ show aname))
        case QName.findit aname g of
            Just sym
                | SymV {pos} <- sym = do
                    let funex = foldr lamNil d.expr d.pats
                        lamNil p e = Lam p e Nothing
                    x <- transExpr env fname funex
                    -- U.logmsg TRACE5 pos ("function " ++ aname.nice g ++ " = " ++ Expr.nice x g)
                    U.changeSym sym.{expr = Just x}
                | otherwise = U.fatal pos (text ("expected function, found " ++ sym.nice g))
            nothing -> do U.fatal pos (text ("Cannot happen, function " ++ aname.nice g ++ " missing"))

transdef env fname (d@InsDcl {pos}) = do
        g <- getST
        let iname = TName g.thisPack (U.insName d)
        case iname.findit g of
            Just sym
                | SymI {pos} <- sym = do
                    clas <- defaultXName pos (TName pPreludeBase "Eq") d.clas
                    typ  <- U.transSigma d.typ
                    U.logmsg TRACE5 pos (text ("instance " ++ QName.nice clas g ++ " (" ++ Sigma.nice typ g ++ ")"))
                    U.changeSym sym.{clas,typ}
                    foreach d.defs (transdef [] (MName iname))
            nothing -> do U.fatal pos (text ("Cannot happen, instance " ++ iname.nice g ++ " missing"))

transdef env fname (d@DatDcl {pos}) = do
        g <- getST
        let tname = TName g.thisPack d.name
        case tname.findit g of
            Just sym | SymT {pos} <- sym = do
                foreach d.ctrs (transCon sym.typ (MName tname))
                foreach d.defs (transdef [] (MName tname))
                polymorphicFields tname
            other -> do U.fatal pos (text ("Cannot happen, data " ++ tname.nice g ++ " missing"))
    where
        polymorphicFields tname = do
            symt <- U.findT tname
            let cons = [ c | c@SymD{}  <- values symt.env ]
                fields = [ f | con <- cons,                                 -- from constructors 
                               f@Field {name = Just n} <- Symbol.flds con,  -- take named fields
                               not (null f.typ.bound)                       -- with polymorphic type
                         ]
                ufields = map (("upd$" ++) • unJust • ConField.name) fields                
                cfields = map (("chg$" ++) • unJust • ConField.name) fields                         
                umethods = [ m | m@SymV{} <- values symt.env,   -- methods that update a poly field
                                m.name.base `elem` ufields ]                          
                cmethods = [ m | m@SymV{} <- values symt.env,   -- methods that update a poly field
                                m.name.base `elem` cfields ]
            foreach umethods (updPolyAnn symt fields) 
            foreach cmethods (chgPolyAnn symt fields)                                                                                          
            return ()
        updPolyAnn :: Symbol -> [ConField QName] -> Symbol -> StG ()
        updPolyAnn dtyp flds meth = do
            g <- getST
            U.logmsg TRACE5 (Symbol.pos meth) (text ("polymorphic update " ++ nice meth g))
            case find ((meth.name.base ==)•("upd$"++)•unJust•ConField.name) flds of
                Just cf -> do
                    let mtyp = ForAll dtyp.typ.bound rho1 where
                                rho1 = RhoFun [] dtyp.typ.{bound=[]} rho2
                                rho2 = RhoFun [] cf.typ dtyp.typ.rho
                    U.changeSym meth.{typ = mtyp, anno = true}
                    U.logmsg TRACE5 meth.pos (text (nice meth g ++ " :: " ++ nicer mtyp g))
                    return ()
                Nothing -> U.fatal dtyp.pos (text (nice meth.name g ++ ": field not found."))
        -- determine type of chg$f method when field f is polymorphic
        --   data Poly = P { listop :: forall e. [e] -> [e], name :: String } 
        --   chg$listop (P a b) = P (f a) b
        -- because field listop is polymorphic, f is higher ranked:
        --   chg$listop :: Poly -> (forall a.(forall e.[e] -> [e]) -> [a] -> [a]) -> Poly  
        chgPolyAnn :: Symbol -> [ConField QName] -> Symbol -> StG ()
        chgPolyAnn dtyp flds meth = do
            g <- getST
            U.logmsg TRACE5 (Symbol.pos meth) (text ("polymorphic change " ++ nice meth g))
            case find ((meth.name.base ==)•("chg$"++)•unJust•ConField.name) flds of
                Just cf -> do
                    -- use fresh vars for substitution of field type
                    let binders = [ (b, KVar) | b <- U.allBinders, b `notElem` cf.typ.vars,
                                                           b `notElem` dtyp.typ.vars ]
                        nbound = take (length cf.typ.bound) binders
                        tvars = [ TVar meth.pos k v | (v,k) <- binders]
                        tree  = Tree.fromList (zip cf.typ.vars tvars)
                        rho4  = U.substRho tree cf.typ.rho                       -- [a] -> [a]
                    let mtyp = ForAll dtyp.typ.bound rho1 where
                                rho1 = RhoFun [] dtyp.typ.{bound=[]} rho2    --  Poly -> 
                                rho2 = RhoFun [] funty dtyp.typ.rho          --  funty -> Poly
                                funty = ForAll nbound rho3                   --  forall a.
                                rho3  = RhoFun [] cf.typ rho4     --  (forall e.[e]->[e])->[a]->[a] 
                    U.changeSym meth.{typ = mtyp, anno = true}
                    U.logmsg TRACE5 meth.pos (text (nice meth g ++ " :: " ++ nicer mtyp g))
                    return ()
                Nothing -> U.fatal dtyp.pos (text (nice meth.name g ++ ": field not found."))
                
        transCon (ForAll bndrs rho) mname (d@DCon {pos}) = do
            g <- getST
            let cname = mname d.name
            case QName.findit cname g of
                Just (con@SymD {pos}) = do
                    let transSigma1 s = do      -- field types can be sigmas
                            ForAll bound frho <- U.validSigma1 (map fst bndrs) s
                            frho <- U.transRho frho
                            stio (ForAll bound frho)
                    sigmas <- mapSt (transSigma1 • ConField.typ) d.flds
                    let nfs = zipWith ConField.{typ=}  con.flds sigmas
                        typ = ForAll bndrs (foldr (RhoFun []) rho sigmas)
                    U.logmsg TRACE5 con.pos (text (con.nice g ++ " :: " ++ typ.nice g))
                    sig <- validSigma typ
                    -- when (con.strsig.isStrict) (foreach nfs (strictFieldsCheck cname))
                    U.changeSym con.{typ=sig}.{flds=nfs}
                _ -> U.fatal pos (text ("constructor `" ++ cname.nice g ++ "` vanished."))
        

transdef env fname (d@JavDcl {pos}) = do
        g <- getST
        let tname = TName g.thisPack d.name
        case tname.findit g of
            Just sym | SymT {pos} <- sym = do
                let nativ = unJust sym.nativ
                let purity = d.isPure || (nativ `elem` pureTypes)
                -- let hasphantoms = any (`elem` [KVar, KType]) sym.typ.kinds
                -- when (not purity && not hasphantoms) do
                --     U.error pos (msgdoc ("mutable native type " ++ sym.name.nice g ++ " needs a state phantom type"))
                --     U.hint  pos (msgdoc ("declaration should read:  data "
                --         ++ sym.typ.nice g ++ " state = native " ++ unJust (sym.nativ)))
                U.changeSym sym.{pur = purity}
                foreach d.defs (transdef [] (MName tname))
                U.nativeType nativ tname
            nothing -> do U.fatal pos (text ("Cannot happen, data " ++ tname.nice g ++ " missing"))


transdef env fname (d@TypDcl {pos}) = do
        g <- getST
        let tname = TName g.thisPack d.name
        case tname.findit g of
            Just sym | SymA {pos} <- sym = case d.rho of
                RhoTau [] tau -> do
                    -- type aliases may be incomplete
                    tauq <- U.transTau tau
                    U.changeSym sym.{typ = ForAll (map Tau.varkind d.vars) (RhoTau [] tauq)}
                _ ->   U.fatal pos (text ("Cannot happen, type alias " ++ tname.nice g ++ " is not just a tau"))
            nothing -> U.fatal pos (text ("Cannot happen, type alias " ++ tname.nice g ++ " missing"))

transdef env fname d = do
        U.fatal d.pos (text ("can't transdef definition with constructor "
            ++ show (constructor d)))
        -- stio Nothing

--- java types where we know for sure that they are pure
pureTypes = primitiveTypes ++ ["java.lang.String", "java.math.BigInteger", "java.util.regex.Pattern",
            "java.lang.Boolean", "java.lang.Byte", "java.lang.Character", "java.lang.Short",
            "java.lang.Integer", "java.lang.Long", "java.lang.Float", "java.lang.Double"]

--- translate pattern to normal form and check for uniqueness of names
--- every pattern must get assigned new unique numbers - they come with uid=0 from the parser
transPatUnique  :: (String -> QName) -> PatternS -> StG Pattern
transPatUnique fname pat = do
        pat <- transPat fname pat
        let !vars = sortBy  (comparing Pattern.var) (U.patVars pat)
            !grps = groupBy (using Pattern.var) vars
        foreach grps check
        return pat    
  where
    check ::  [Pattern] -> StG ()
    check [_] = return ()   -- unique
    check xs 
        | (var:_) <- reverse xs, Pattern.var var != "_" = do
            g <- getST
            U.error (Pattern.pos var) (msgdoc ("Variable `" 
                                ++ nicer var g 
                                ++ "` must not occur more than once in pattern."))
        | otherwise = return ()       
    transPat fname pat = do
        g <- getST
        U.logmsg TRACE5 (getpos pat) (text ("transPat: " ++ nice pat g ))
        case pat of
            PVar {pos,uid,var}
                | var ~ #\.# = do
                    U.error pos (msgdoc "Qualified variables must not occur in patterns.")
                    stio (PVar {pos, uid, var="_"})
                | otherwise  = do
                    u <- U.uniqid 
                    let sym = U.patLocal pos u var 
                    U.enter sym
                    when (var != "_") do
                        changeST Global.{sub <- SubSt.{
                            idKind <- insertkv (KeyTk pos.first) (Right sym.name)}}
                    stio (PVar {pos,uid=u,var})
            PCon {pos,qname,pats} -> do
                                qname <- resolveVName fname pos qname
                                pats <- mapSt (transPat fname) pats
                                checkCon pos qname pats
                                stio (PCon {pos,qname,pats})
            PUser (PVar {pos,uid,var}) lazy -> do
                                u <- U.uniqid
                                let sym = (U.patLocal pos u var).{state=StrictChecked, 
                                                                  strsig=if lazy then U else S[]} 
                                U.enter sym
                                changeST Global.{sub <- SubSt.{
    			                    idKind <- insertkv (KeyTk pos.first) (Right sym.name)}}
                                stio (PUser (PVar {pos,uid=u,var}) lazy)
            PUser p lazy    -> do pat <- transPat fname p; return PUser{pat,lazy}
            PLit p k v      -> stio (PLit p k v)
            PAnn p s        -> liftM2 PAnn (transPat fname p) (transSigma s)
            PAt {pos,var,uid,pat} -> do
                                u <- U.uniqid
                                let sym = U.patLocal pos u var
                                U.enter sym
                                changeST Global.{sub <- SubSt.{
                                    idKind <- insertkv (KeyTk pos.first) (Right sym.name)}}
                                pat <- transPat fname pat
                                stio (PAt {pos,var,uid=u,pat})
            PMat {pos,var,uid,value} -> do
                                u <- U.uniqid
                                let sym = (U.patLocal pos u var).{
                                    typ = ForAll [] (RhoTau [] (TCon pos (TName pPreludeNative "Matcher")))}
                                U.enter sym
                                changeST Global.{sub <- SubSt.{
                                    idKind <- insertkv (KeyTk pos.first) (Right sym.name)}}
                                stio (PMat {pos,var,uid=u,value})
            PConFS {pos,qname,fields} -> do
                                qname <- resolveVName fname pos qname
                                pats <- mapSt (transPat fname • snd) fields
                                let pfs = map fst fields
                                    ft = Tree.fromList (zip pfs pats)
                                    fpat (Just x)
                                        | Just p <- ft.lookup x = stio p
                                    fpat other = do
                                            -- u <- U.uniqid
                                            transPat fname (PVar {pos = pos.change VARID "_", var="_", uid = 0})
                                case qname.findit g of
                                    Just (SymD {flds}) -> do
                                        let fs = [ f | Field {name = Just f} <- flds ]
                                            badfs = filter (`notElem` fs) pfs
                                        pats <- mapSt fpat (map ConField.name flds)
                                        if null badfs then stio (PCon {pos,qname,pats})
                                          else do
                                            U.error pos (msgdoc ("Constructor " ++ qname.nice g ++ " has no "
                                                ++ (if length badfs == 1 then "field " else "fields ")
                                                ++ joined ", " badfs))
                                            stio (PCon {pos,qname,pats})
                                    _ -> do
                                        checkCon pos qname pats
                                        stio (PCon {pos,qname,pats})
      where
            checkCon pos qcon ps = do
                    g <- getST
                    case QName.findit qcon g of
                        Just (SymD {flds})
                                    | length flds == length ps = stio ()
                                    | otherwise = U.error pos (msgdoc ("constructor " ++ qcon.nice g
                                                    ++ " demands " ++ show (length flds)
                                                    ++ " arguments, but you gave "
                                                    ++ show (length ps)))
                        nothing -> when (g.errors == 0) do
                            U.error pos (msgdoc (qcon.nice g ++ " is not a data constructor"))

transMbSigma (Just s) = liftM Just (transSigma s)
transMbSigma Nothing  = stio Nothing

fName env fname nm = case findLocal env nm of
    Local 0 _ -> fname nm
    local     -> local 

transExpr :: [QName] -> (String -> QName) -> ExprS -> StG Expr
transExpr env fname ex = do
    g <- getST
    U.logmsg TRACE5 (getpos ex) (text ("transExpr: " ++ show env ++ "    " ++ ex.nice g))
    case ex of
        Vbl {pos,name,typ} -> do
                        name <- resolveVName (fName env fname) pos name
                        typ  <- transMbSigma typ
                        stio (Vbl {pos, name,typ})
        Con {pos,name,typ} -> do
                        name <- resolveVName fname pos name
                        typ  <- transMbSigma typ
                        stio (Con {pos, name, typ})
        Mem x s t    -> do
                            x <- transExpr env fname x
                            t <- transMbSigma t
                            stio (Mem x s t)
        App a b t    -> do
                            a  <- transExpr env fname a
                            b  <- transExpr env fname b
                            t  <- transMbSigma t
                            stio (App a b t)
        Lit p k v t  -> liftM (Lit p k v) (transMbSigma t)
        Case {ckind,ex,alts,typ} -> do
                    ex   <- transExpr env fname ex
                    alts <- mapSt transAlt alts
                    typ  <- transMbSigma typ
                    stio (Case {ckind, ex, alts, typ})
                where
                        transAlt (CAlt {pat, ex}) = do
                                pat <- transPatUnique  fname pat
                                let nenv = U.patNames pat
                                ex  <- transExpr (nenv++env) fname ex
                                stio (CAlt {pat, ex})
                              
        Ifte c a b t -> do
                        c <- transExpr env fname c
                        a <- transExpr env fname a
                        b <- transExpr env fname b
                        t <- transMbSigma t
                        stio (Ifte c a b t)
        Let {defs,ex,typ} -> do
                        defs <- F.fixdefs defs
                        nenv <- foldM enterlocal [] (E.annosLast defs)
                        foreach defs (transdef (nenv++env) fname)
                        ex   <- transExpr (nenv++env) fname ex
                        typ  <- transMbSigma typ
                        syms <- mapSt U.findV nenv
                        foreach (syms) checkDefined
                        stio (Let {env=nenv, defs=[], ex, typ})
                    where
                        checkDefined (SymV {expr = Just _}) = stio ()
                        checkDefined sym = U.error sym.pos (msgdoc (nice sym g ++ " is annotated but not defined."))
                        enterlocal :: [QName] -> Definition -> StG [QName]
                        enterlocal env def = case findLocal env def.name of
                            Local 0 _ = do      -- not yet entered
                                uid <- U.uniqid
                                E.enter1 (Local uid) def
                                return  (Local uid def.name:env)
                            Local u _ = do
                                E.enter1 (Local u) def
                                return env
                            _ = error "onlyLocal possible"
        Lam {pat,ex,typ} -> do
                        pat <- transPatUnique  fname pat
                        let nenv = U.patNames pat
                        ex  <- transExpr (nenv++env) fname ex
                        typ <- transMbSigma typ
                        stio (Lam {pat,ex,typ})
        Ann {ex,typ} -> do
                        ex  <- transExpr env fname ex
                        typ <- transMbSigma typ
                        stio (Ann {ex,typ})
        ConFS {pos,name,fields,typ} -> do
                        name <- resolveVName fname pos name
                        exs  <- mapSt (transExpr env fname) (map snd fields)
                        typ  <- transMbSigma typ
                        let vUndef = Vbl (pos.change VARID "undefined") (VName pPreludeBase "undefined") Nothing
                        g <- getST
                        case QName.findit name g of
                            Just (symd@SymD {}) -> do
                                let xnms = map fst fields
                                    flds = [ f | Field {name = Just f} <- symd.flds ]
                                    badf = filter (`notElem` flds) xnms
                                    miss = filter (`notElem` xnms) flds
                                    tree = Tree.fromList (zip xnms exs)
                                    mapx s = case tree.lookup s of
                                        Just x -> x
                                        Nothing -> vUndef
                                    oexs = map mapx flds
                                    res  = fold nApp (Con {pos,name,typ}) oexs
                                    f1s  = if length badf == 1 then "field " else "fields "
                                    f2s  = if length miss == 1 then "field " else "fields "
                                unless (null badf) do
                                    g <- getST
                                    U.error pos (msgdoc (nice symd g ++ " has no " ++ f1s ++ joined ", " badf))
                                unless (null miss) do
                                    g <- getST
                                    U.error pos (msgdoc (f2s ++ joined ", " miss ++ " missing in construction of "
                                                    ++ symd.name.nice g))
                                stio res
                            Just sym -> do
                                U.error pos (fill (Nice.break ("looked for constructor " ++ name.nice g ++ ", found "
                                                            ++ sym.nice g)))
                                stio vUndef
                            Nothing -> do 
                                U.error pos (fill (Nice.break ("looked for constructor " ++ name.nice g ++ ", found Nothing")))
                                stio vUndef

        -- _ -> do U.error (U.getepos ex) ("can't translate expr: " ++ U.showex ex g)
        --        stio (Vbl 0 (VName pPrelude "undefined"))

transclass :: DefinitionS -> Symbol -> StG ()
transclass def sym = do
        supers <- liftM (map unJust • filter isJust)
                        (mapSt (resolveXName def.pos sym) def.supers)
        U.changeSym sym.{supers = unique supers}
        g <- getST
        foreach def.defs  (transdef [] (MName sym.name))

