{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
 * This is pass 3 of the frege compiler, imlemented in 'pass'.
 -}

package frege.compiler.Enter where

import frege.List (Tree, keys, values, insertkv)
import Data.List  as DL(uniqBy, sort, sortBy)

import frege.compiler.Data
import frege.compiler.Nice (text, msgdoc)
import frege.compiler.Utilities     as U(vSym, linkq, pSigma)
-- import frege.compiler.Transdef()  as T

{--
 * In this pass, we insert placeholders in the symbol table
 * and create source code for derived instances.
 *
 * Instance declarations come later in 'pass2', because references to
 * classes and data types must be resolved.
 * Likewise derive declarations, they are transformed to instance
 * declarations.
 -}
pass = do
    g <- getST
    let defs = filter (not • isInstOrDerive) g.definitions
    enter (VName g.thisPack) defs
    g <- getST
    stio ("symbols", symbols g.thisTab)
  where
    symbols :: Symtab -> Int
    symbols tree = fold (+) 0 (map oneSym (values tree))
    oneSym :: Symbol -> Int
    oneSym sym
        | sym.{env?} = 1 + symbols sym.env
        | otherwise  = 1

isInstOrDerive (InsDcl {pos}) = true
isInstOrDerive (DrvDcl {pos}) = true
isInstOrDerive _              = false

{--
 * 'pass2' creates the field definitions.
 *
 * requires: data types and constructors are entered
 *
 * ensures: for each type /T/, for each field /f/ in /T/ there wil be
 * 4 corresponding functions @T.f@, @T.upd$f@, @T.chg$f@
 * and @T.has$f@
 -}
pass2 = do
    g <- getST
    definitions <- mapSt chgddef g.definitions
    changeST Global.{sub <- SubSt.{definitions=definitions}}
    stio ("data types", 1)

chgddef (d@DatDcl {pos}) = do
        g <- getST
        let dname = TName g.thisPack d.name
        dsym <- U.findT dname
        let newdefs = work g dsym
        enter (MName dname) newdefs
        stio d.{defs <- (++ newdefs)}
    where
        work g (dsym@SymT {env}) =
                let cons   = [ sym | sym@SymD {sid} <- values env ]
                    fields = (uniqBy (using fst) • sort) [ (f,p) | con <- cons, Field {pos = p, name = Just f} <- Symbol.flds con ]
                in [ d | (f,p) <- fields, d <- gen g p dsym.name cons f]
        work _ _ = error "work: need a SymT"
        gen :: Global -> Position -> QName -> [Symbol] -> String -> [DefinitionS]
        gen g fpos tname cons f = let
                pos   = fpos.{first <- Token.{offset <- succ}}
                model = FunDcl {vis=Public, poss = [fpos], name="", pats=[pvar "this"], expr = var "x", doc=Nothing}
                symf =  model.{name = f, expr = getExpr,
                                doc = getdoc}   -- Just ("access field @" ++ f ++ "@")}
                symu =  model.{name = "upd$" ++ f, expr = updExpr,  poss = [pos],
                                pats=[pvar "this", pvar "that"],
                                doc = Just ("update field @" ++ f ++ "@")}
                symc =  model.{name = "chg$" ++ f, expr = chgExpr,  poss = [pos], 
                                pats=[pvar "this", pvar "that"],
                                doc = Just ("change field @" ++ f ++ "@")}
                symh =  model.{name = "has$" ++ f, expr = hasExpr,  poss = [pos],
                                doc = Just ("check if constructor has field @" ++ f ++ "@")}
                -- -------------- utility functions ---------------
                -- get the doc for field f
                getdoc = case [ d | con <- cons,
                                    Field {name = Just g, doc = Just d} <- Symbol.flds con,
                                    f == g ] of
                            [] -> Just ("access field @" ++ f ++ "@")
                            xs -> Just (joined "\n" xs)
                -- numbers = iterate (1+) 1
                confs sym = map ConField.name (Symbol.flds sym)   -- just the names
                -- find sub-pattern name of field f in constructor sym
                occurs :: Symbol -> String -> [ExprS]
                occurs sym f = (map fst • filter ((==Just f) • snd) • zip subvars) (confs sym)
                -- arity of a constructor
                arity sym = length (Symbol.flds sym)
                -- displayed name of a constructor
                cname sym = case Symbol.name sym of
                    MName tn base -> With1 pos.first.{tokid=CONID, value=tn.base}
                                           pos.first.{tokid=CONID, value=base}
                    _ -> error "constructor must be a member"
                -- [PVar c1, PVar c2, PVar c3, ...]
                -- subpats "_" = repeat (PVar {name="_",pos})
                subpats c = [ pvar (c   ++ show a)   | a <- 1..1000 ]
                subvars   = [ var  ("a" ++ show a)   | a <- 1..1000 ]
                -- construct pattern  Con s1 s2 s3 ... sn
                conpat con s = PCon {qname=cname con,pos,pats}
                    where pats = take (arity con) (subpats s)
                reppat v (pcon@PCon {}) = pcon.{pats <- map sv}
                    where
                        -- sv (p@PVar {var}) | var == v = PUser{pat=p, lazy=false}
                        sv p = p
                reppat v p = p
                -- construct simple (pattern) variables
                pvar s = PVar {var=s,uid=0,pos}
                var  s = Vbl  {name=Simple pos.first.{value=s},pos,typ = Nothing}
                -- replace a variable named a with expr b in a list
                rep a b vs = map (repvar a b) vs                -- replace Vbl ONLY!
                repvar :: String -> ExprS -> ExprS -> ExprS
                repvar a b v = if (Expr.name v).id.value == a then b else v
                -- constructor expression
                conval con = Con {name=cname con,pos,typ=Nothing}
                -- make an app
                mkApp x xs = fold nApp x xs
                this   = var "this"
                that   = var "that"
                vFalse = Lit {kind=LBool, value="false", pos, typ = Nothing}
                vTrue  = Lit {kind=LBool, value="true", pos, typ = Nothing}
                getExpr = Case CNoWarn this getAlts Nothing
                getAlts = [ CAlt {pat=conpat con "a", ex=v}
                                                        | con <- cons, v <- occurs con f]
                updExpr = Case CNoWarn this updAlts Nothing
                conUpd :: Symbol -> ExprS -> ExprS
                conUpd con v = mkApp (conval con) (rep v.name.id.value that (take (arity con) subvars))
                updAlts = [ CAlt {pat=conpat con "a", ex = conUpd con v}
                                                        | con <- cons, v <- occurs con f]
                chgExpr = Case CNoWarn this chgAlts Nothing
                conChg :: Symbol -> ExprS -> ExprS
                conChg con v = mkApp (conval con) (rep v.name.id.value (nApp that v) (take (arity con) subvars))
                chgAlts = [ CAlt {pat=reppat (Expr.name v).id.value (conpat con "a"), ex = conChg con v}
                                                        | con <- cons, (v::ExprS) <- occurs con f]
                hasExpr
                    | length cons == 1 = vTrue
                    | otherwise = Case CNoWarn this (hasAlts ++ [last]) Nothing
                hasAlts = [ CAlt {pat=conpat con "_", ex = vTrue}
                                                        | con <- cons, v <- occurs con f]
                last = CAlt {pat=pvar "_", ex = vFalse}
            in [symf, symu, symc, symh]
chgddef d = stio d      -- leave others unchanged

{--
 * 'pass3' must be called only after type aliases have been resolved and all
 * class and data definitions are entered.
 -}
pass3 = do
    g <- getST
    let insdrv = filter isInstOrDerive g.definitions
        normal = filter (not • isInstOrDerive) g.definitions
    derived <- mapSt deriveInst insdrv
    enter (VName g.thisPack) derived
    -- change state so that derived instances will be transdef'ed later
    changeST Global.{sub <- SubSt.{definitions = normal ++ derived}}
    stio ("instances", length derived)

--- post condition is true
post = do
    -- g <- getST
    -- doio $ stderr << length g.definitions
    stio true

transTVar :: TauS -> Tau
transTVar (TVar {var,pos,kind}) = TVar {var,pos,kind}
transTVar _ = error "transTVar: no TVar"


{-- create a symbolic link to given variable or constructor symbol in the global namespace -}
link :: Symbol -> StG ()
link sym = do
    g <- getST
    U.logmsg TRACE3 sym.pos (text ("`" ++ sym.name.base ++ "` link to " ++ sym.nice g))
    U.enter (SymL {sid=0, pos=sym.pos, vis=sym.vis, -- doc=Nothing,
                   name=VName g.thisPack sym.name.base, alias=sym.name})

--- reorder definitions so that annotations come last
annosLast defs = nannos ++ annos where
    (annos, nannos) = DL.partition isAnno defs
    isAnno (AnnDcl {pos}) = true
    isAnno _              = false 
{--
    Create provisional symbols for many definitions in the symbol table.
    Takes care that annotations are processed after their implemetations
    so that 'changeSym' will work.
    -}
enter fname defs = foreach (annosLast defs) (enter1 fname)

{-- create provisional symbol for 1 definition in the symbol table -}
enter1 :: (String -> QName) -> DefinitionS -> StG ()
enter1 fname (ImpDcl {pos})   = stio ()
enter1 fname (FixDcl {pos})   = stio ()
enter1 fname (d@ClaDcl {pos}) = do
        g <- getST
        let tname = TName g.thisPack d.name
        changeST Global.{sub <-
            SubSt.{idKind <- insertkv (KeyTk pos.first) (Right tname)}}
        U.enter (SymC {sid=0, pos=d.pos, vis=d.vis, doc=d.doc, name=tname,
                       tau=transTVar d.clvar, supers=[], insts=[], env=Nil})

        let vdefs = map Definition.{vis <- max d.vis} d.defs
            xdefs = filter ((>d.vis) • Definition.vis) d.defs

        -- complain about class members that are more visible than the class
        foreach xdefs (\(def::Definition) -> U.error def.pos (msgdoc (
                                d.name ++ "."  ++ def.name ++ " is " ++ show def.vis
                                ++ " while the enclosing class is only "
                                ++ show d.vis)))

        enter (MName tname) vdefs
        {-
            all entries from the env of the symbol that is named by 'tname'
            except those whose name is found in the global package and the
            associated symbol is already a link
            (Because, for instance, class Ord may have a default definition
            of function != that conflicts with Eq.!=)
            (We must check later for the case that 2 unrelated classes
            define a method with the same name.)
         -}
        g <- getST
        let vs = (filter (maybe true (not • Symbol.{alias?})
                                    • flip QName.find g • VName g.thisPack
                                    • QName.base • Symbol.name)
                            • values • maybe Nil Symbol.env • tname.findit) g
        U.logmsg TRACE3 pos (text ("enter1: ClaDcl: vs=" ++ show (map (flip nice g) vs)))
        foreach (vs) link

enter1 !fname (!d@InsDcl {pos=!pos}) = do
        g <- getST

        let tname = TName g.thisPack (U.insName d)
        U.enter (SymI  {pos=d.pos, vis=d.vis, doc=d.doc, name=tname,
                 sid=0, clas=fname "", typ=pSigma, env=Nil})
        enter (MName tname) d.defs

        !typ  <- U.transSigma d.typ
        !clas <- U.defaultXName (Pos d.clas.id d.clas.id) (TName pPreludeBase "Eq") d.clas

        case U.instTSym typ g of
            Just (SymT {name=typnm}) -> do
                 foreach d.defs (mklinkd typnm (MName tname))
                 case clas.findit g of
                    Just (SymC {name,env}) -> do
                        return ()
                        -- let cmeths = [ sym.name.base | sym@SymV{anno=true} <- values env ] 
                        -- foreach (map (QName.base • Symbol.name) (values env)) (mklink typnm (MName name))
                    _  ->  U.error pos (msgdoc ("`" ++ clas.nice g ++ "` does not name a class."))
            Just sym -> U.error pos (msgdoc ("can't make instance for " ++ sym.nice g
                            ++ ", it's not a type at all."))
            Nothing  -> U.error pos (msgdoc ("can't make instance for " ++ typ.nicer g
                            ++ ", there is no type constructor."))
    where
        mklinkd !tname !mname !d = mklink tname mname (DefinitionT.name d)
        mklink  !tname !mname !nm = do
            g <- getST
            let !mem = mname nm
                !rem = MName tname nm
            case QName.findit mem g of
                Just !sym -> case rem.findit g of
                    Just _  -> stio ()              -- already there
                    Nothing -> linkq rem sym
                Nothing  -> U.fatal d.pos (text ("FATAL, can't find " ++ mem.nice g ++ " again"))

enter1 fname (d@DrvDcl {pos}) = U.fatal pos (text "FATAL: cannot enter a derive definition")

{-
enter1 fname (d@FunDcl {poss, name=´^let\$´}) = do
        g <- getST
        U.logmsg TRACE3 (head poss) (text ("enter: let "
            ++ show (map (flip PatternT.nice g) d.pats) ++ " = "
            ++ d.expr.nice g))
        when (length d.pats != 1)  do
            U.fatal (head poss) (text "illegal pattern bindings, turn on -x3")
        foreach (U.patVars (head d.pats)) enterpvar
    where
        enterpvar :: PatternT a -> StG ()           -- actually, PVar only
        enterpvar (pvar@PVar{pos,var,uid}) = do
            let !qname = fname var
            case qname of 
                Local{} -> do
                    pat <- U.pReturn pvar
                    let qname = Local pat.uid pat.var
                    changeST Global.{   
                        sub <- SubSt.{
                        idKind <- insertkv (KeyTk (Position.first pos)) (Right qname)}}
                    U.enter (U.patLocal pos uid var)
                other -> do
                    changeST Global.{   
                        sub <- SubSt.{
                        idKind <- insertkv (KeyTk (Position.first pos)) (Right qname)}}
                    U.enter (vSym pos qname).{vis=d.vis, doc=d.doc}
-}

enter1 fname (d@FunDcl {poss}) = do
        let !qname = fname d.name
        foreach poss (register qname)
        U.enter (vSym (head poss) qname).{vis=d.vis, doc=d.doc}
    where
        register :: QName -> Position -> StG ()
        register qname pos =  
                         changeST Global.{
                            sub <- SubSt.{
                            idKind <- insertkv (KeyTk pos.first) (Right qname)}}
        
enter1 fname (d@NatDcl {pos}) = do
        let !qname = fname d.name
        changeST Global.{
          sub <- SubSt.{
          idKind <- insertkv (KeyTk pos.first) (Right qname)}}
        U.enter (vSym pos qname).{vis=d.vis, doc=d.doc,
                                                nativ=Just d.meth, pur=d.isPure}
enter1 fname (d@AnnDcl {pos}) = do
        g <- getST
        let qname = fname d.name
            merge Nothing _ b _ = b
            merge a _ Nothing _ = a
            merge (Just a) apos (Just b) bpos = if Position.start apos < Position.start bpos
                then Just (a ++ "\n\n" ++ b)
                else Just (b ++ "\n\n" ++ a)
        case QName.findit qname g of
            Just (sym@SymV {nativ = Nothing, anno = false}) -> do
                when (sym.vis != d.vis) do
                    U.error pos (msgdoc ("Visibility of annotation and implementation must match,"
                        ++ " implementation was announced as " ++ show sym.vis
                        ++ " at line " ++ show sym.pos))
                U.changeSym sym.{pos <- d.pos.merge,
                                 doc = merge sym.doc sym.pos d.doc d.pos,
                                 anno = true}
                changeST Global.{
                    sub <- SubSt.{
                        idKind <- insertkv (KeyTk pos.first) (Right sym.name)}}
            Just (sym@SymV {anno = true}) ->
                U.error pos (msgdoc ("cannot annotate " ++ sym.nice g ++ " again"))
            Just sym ->
                U.error pos (msgdoc ("cannot annotate " ++ sym.nice g))
            Nothing -> do -- either class method or implementation missing.
                U.enter (vSym d.pos qname).{vis=d.vis, doc=d.doc, anno = true}
                changeST Global.{
                    sub <- SubSt.{
                        idKind <- insertkv (KeyTk pos.first) (Right qname)}}


enter1 fname (d@DatDcl {pos}) = do
        g <- getST
        let dname = TName g.thisPack d.name
            kind  = foldr KApp KType dsig.kinds
            dtcon = TCon {pos=d.pos, name=dname}
            dtau  = if null d.vars then dtcon else dtcon.mkapp (map transTVar d.vars)
            drho  = RhoTau [] dtau
            dsig  = ForAll (map Tau.varkind d.vars) drho
            dsym  = SymT {sid=0, pos=d.pos, vis=d.vis, doc=d.doc, name=dname, typ=dsig,
                            product = length d.ctrs == 1,
                            enum = null d.vars && all (0==) (map (length • DCon.flds) d.ctrs),
                            nativ = Nothing, pur = false, kind,
                            newt = length d.ctrs == 1 && 1 == (length • DCon.flds • head) d.ctrs,
                            env=Nil}
        U.enter dsym
        changeST Global.{
            sub <- SubSt.{
                idKind <- insertkv (KeyTk pos.first) (Right dname)}}
        foreach (zip U.numbers d.ctrs) (mkCon (MName dname))
        enter (MName dname) d.defs
    where
        mkCon :: (String -> QName) -> (Int, DConS) -> StG ()
        mkCon mname (cid, dcon) = do
            g <- getST
            {-
             * information about fields of a constructor are essential
             * when translating patterns in pass 5
            -}
            let fs = map ConField.{typ = pSigma} dcon.flds  -- zip (map fst dcon.flds) (repeat pSigma)
                fnms = [ n | Field {name = Just n} <- dcon.flds ]
                fnps = [ (p, n) | Field {pos=p, name = Just n} <- dcon.flds ]
                ssig = S [ if ConField.strict f then S[] else U | f <- dcon.flds]
                !cqname = mname dcon.name
                register (p, n) = changeST Global.{sub <- SubSt.{
                    idKind <- insertkv (KeyTk (Position.first p)) (Right (mname n))}}
            foreach fnms (checkunique dcon.pos (mname dcon.name) fnms)
            U.enter (SymD {name = mname dcon.name, typ=pSigma, flds = fs,
                cid=cid, sid=0, strsig = ssig,
                pos=dcon.pos, vis=dcon.vis, doc=dcon.doc})
            changeST Global.{
                sub <- SubSt.{
                    idKind <- insertkv (KeyTk dcon.pos.first) (Right cqname)}}
            foreach fnps register 
            when (dcon.vis != Private)
                (U.enter (SymL {name = VName g.thisPack dcon.name, alias = cqname,
                    sid=0, pos=dcon.pos, vis=dcon.vis, {-doc=dcon.doc-}}))
        checkunique :: Position -> QName -> [String] -> String -> StG ()
        checkunique pos con fs f = do
            when (1 < (length • filter (f==)) fs) do
                g <- getST
                U.error pos (msgdoc ("Field `" ++ f ++ "' in constructor " ++ QName.nice con g ++
                    " must occur only once."))
            stio ()


enter1 fname (d@JavDcl {pos}) = do
        g <- getST
        let !dname = TName g.thisPack d.name
            dtcon = TCon {pos=d.pos, name=dname}
            dtau  = dtcon.mkapp (map transTVar d.vars)
            primitive = d.jclas `elem` primitiveTypes
            ktype = if primitive then KType else KGen
            kind  = foldr KApp ktype dsig.kinds 
            dsig  = ForAll (map Tau.varkind d.vars) (RhoTau [] dtau)
        U.enter (SymT {sid=0, pos=d.pos, vis=d.vis, doc=d.doc, name=dname,
                       product = false, enum = false, newt = false, pur = d.isPure,
                       typ=dsig,
                       kind, nativ = Just d.jclas, env=Nil})
        changeST Global.{
            sub <- SubSt.{
                idKind <- insertkv (KeyTk pos.first) (Right dname)}}
        enter (MName dname) d.defs

enter1 fname (d@TypDcl {pos}) = do
        g <- getST
        let !dname = TName g.thisPack d.name
            kind = KVar
        changeST Global.{
            sub <- SubSt.{
                idKind <- insertkv (KeyTk pos.first) (Right dname)}}
        U.enter (SymA {sid=0, pos=d.pos, vis=d.vis, doc=d.doc,
                       name = dname, typ = pSigma, kind,
                       vars = map transTVar d.vars})


enter1 fname d = U.error d.pos (text ("Can't enter dcl constructor " ++ show (constructor d)))

--- make an instance definition from a derive definition, identity for instance definitions
deriveInst :: DefinitionS -> StG DefinitionS
deriveInst (d@InsDcl {pos}) = stio d
deriveInst (d@DrvDcl {pos}) = do
        g <- getST
        clas <- U.defaultXName pos (TName pPreludeBase "Eq") d.clas
        typ  <- U.transSigma d.typ
        case U.instTSym typ g of
            Just (sym@SymT {env}) | ctrs <- U.envConstructors env,
                                    not (null ctrs) -> do
                dcls <- deriveDcls pos clas sym ctrs
                -- dtyp <- withDerivedContext pos d.typ d.clas
                stio idcl.{defs=dcls, typ=withDerivedContext pos d.typ d.clas}
            Just sym -> do
                U.error pos (msgdoc ("Can't derive " ++  clas.nice g
                             ++ " (" ++ typ.nice g ++ "), type has no constructors"))
                stio idcl
            Nothing ->  do
                U.error pos (msgdoc ("Can't derive " ++  clas.nice g
                             ++ " (" ++ typ.nice g ++ ")"))
                stio idcl
    where
        idcl = InsDcl {pos=d.pos, vis=d.vis, clas=d.clas,
                       typ=d.typ, doc=d.doc, defs=[]}
        withDerivedContext pos (ForAll [] rho) clas
            | null rho.context = ForAll [] rho.{context}
            where
                context = [ Ctx pos clas (TVar pos KVar v) false | v <- U.freeTVnames [] rho ]
        withDerivedContext pos sigma clas = sigma

deriveInst d = do
    U.fatal d.pos (text ("deriveInst got definition with constructor "
                    ++ show (constructor d)))




deriveDcls :: Position -> QName -> Symbol -> [Symbol] -> StG [DefinitionS]
deriveDcls pos clas forty ctrs = do
    g <- getST
    U.logmsg TRACE4 pos (text ("derive " ++ QName.nice clas g ++ " for " ++ Symbol.nice forty g))
    let derivable = ["Eq", "Ord", "Enum", "Bounded", "Show"]
        con = head ctrs
        -- arity of a constructor
        arity sym = length (Symbol.flds sym)
        isEnum = all (0==) (map arity ctrs)
        -- displayed name of a constructor
        cname sym = case Symbol.name sym of
            MName tn base -> With1 pos.first.{tokid=CONID, value=tn.base}
                                   pos.first.{tokid=CONID, value=base}
            _ -> error "constructor must be a member"
        -- [PVar c1, PVar c2, PVar c3, ...]
        -- subpats "_" = repeat (pvar "_")
        subpats c = [ pvar (c ++ show a) | a <- 1..1000 ]
        subvars c = [ var  (c ++ show a) | a <- 1..1000 ]
        -- construct pattern  Con s1 s2 s3 ... sn
        conpat :: Symbol -> String -> PatternS
        conpat con s = PCon {qname=cname con, pos=pos.change QCONID con.name.base, pats}
            where pats = take (arity con) (subpats s)
        -- construct simple (pattern) variables
        pvar :: String -> PatternS
        pvar s = PVar {var=s,uid=0,pos=pos.change VARID s}
        var :: String -> ExprS
        var  s = Vbl  {name=Simple pos.first.{tokid=VARID, value=s},pos=pos.change VARID s, typ = Nothing}
        gvar p s = Vbl {name=With1 pos.first.{tokid=CONID, value=p} pos.first.{tokid=VARID, value=s},
                        pos=pos.change VARID s, typ = Nothing}
        gvar2 p t s = Vbl {name=With2 pos.first.{tokid=CONID, value=p}
                                      pos.first.{tokid=CONID, value=t}
                                      pos.first.{tokid=VARID, value=s},
                        pos=pos.change VARID s, typ = Nothing}
        !varg1  = var  "arg1"
        !varg2  = var  "arg2"
        !parg1  = pvar "arg1"
        !parg2  = pvar "arg2"
        -- misc global SNames
        tuple2Name  = With1 baseToken pos.first.{tokid=CONID, value="(,)"}
        -- unitName    = With1 baseToken pos.first.{tokid=CONID, value="()"}
        eqName      = With2 baseToken pos.first.{tokid=CONID, value="Ordering"} pos.first.{tokid=CONID, value="Eq"}
        eqeqName    = With2 baseToken pos.first.{tokid=CONID, value="Eq"} pos.first.{tokid=VARID, value="=="}
        hashName    = With2 baseToken pos.first.{tokid=CONID, value="Eq"} pos.first.{tokid=VARID, value="hashCode"}
        addName     = With2 baseToken pos.first.{tokid=CONID, value="Int"} pos.first.{tokid=VARID, value="+"}
        mulName     = With2 baseToken pos.first.{tokid=CONID, value="Int"} pos.first.{tokid=VARID, value="*"}
        -- undefName   = With1 baseToken pos.first.{tokid=VARID, value="undefined"}
        errorName   = With1 baseToken pos.first.{tokid=VARID, value="error"}
        appName     = With2 baseToken pos.first.{tokid=CONID, value="String"} pos.first.{tokid=VARID, value="++"}
        showName    = With1 pos.first.{tokid=CONID, value="PreludeText"} pos.first.{tokid=VARID, value="show"}
        ptcon pats  = PCon {qname=tuple2Name, pos=pos.change CONID "(,)", pats}
        !vtcon      = Con  {name= tuple2Name, pos=pos.change CONID "(,)", typ = Nothing}
        ptup a b = ptcon [a,b]
        vtup a b = nApp  (nApp  vtcon a) b
        -- misc constructors and vars
        !pEq = PCon {qname=eqName, pos=pos.change CONID "Eq", pats=[]}
        -- !pUn = PCon {qname=unitName, pos=pos.change CONID "()", pats=[]}
        !vEq = Con  {name=eqName, pos=pos.change CONID "Eq", typ = Nothing}
        !vFalse = Lit {kind=LBool, value="false", pos, typ = Nothing}
        !vTrue  = Lit {kind=LBool, value="true",  pos, typ = Nothing}
        -- !vUndef = Vbl {name=undefName, pos=pos.change VARID "undefined", typ = Nothing}
        !vError = Vbl {name=errorName, pos=pos.change VARID "error", typ = Nothing}
        !vApp   = Vbl {name=appName,   pos=pos.change VARID "++", typ = Nothing}
        !vShow  = Vbl {name=showName,  pos=pos.change VARID "show", typ = Nothing}
        !opEq   = Vbl {name=eqeqName,  pos=pos.change VARID "==", typ = Nothing}
        !opHash = Vbl {name=hashName,  pos=pos.change VARID "hashCode", typ = Nothing}
        !opAdd  = Vbl {name=addName,   pos=pos.change VARID "+", typ = Nothing}
        !opMul  = Vbl {name=mulName,   pos=pos.change VARID "*", typ = Nothing}
        string s = Lit {kind=LString, value=show s,  pos=pos.change STRCONST (show s), typ = Nothing}
        int :: Int -> ExprS
        int n    = Lit  {kind=LInt, value=n.show, pos=pos.change INTCONST (show n), typ = Nothing}
        pint n   = PLit {kind=LInt, value=n.show, pos=pos.change INTCONST (show n)}
        -- make a function definition
        publicfun name pats expr = FunDcl {vis=Public, poss = [pos], name, pats, expr,
                        -- strict=false,
                        doc=Just "Function generated for derived istance."}
        calt p x  = CAlt {pat=p, ex=x}
        -- construct  a ++ b
        mkapp a b = nApp (nApp vApp a) b
        -- construct  a `op` b
        mkop a op b = nApp (nApp op a) b
        -- construct "show v"
        showit v = vShow `nApp` v
        -- construct  a `op` b
        -- mkbin op a b = nApp (nApp (var op) a) b
        -- derive Eq
        deriveClass "Eq" = [publicfun "==" [parg1,parg2] ifx, publicfun "hashCode" [parg1] hash] where
            ifx   = if length ctrs == 1 then eex else Ifte cond eex vFalse Nothing
            eex   = if isEnum then vTrue else Case CNormal (vtup varg1 varg2) alts Nothing
            alts  = map mkequalalt ctrs ++ deflt
            deflt = if length ctrs == 1 then [] else [dalt]
            dalt  = calt (pvar "_") vFalse
            cond  = nApp  (nApp opEq ca1) ca2
            ca1   = nApp (gvar "PreludeBase" "constructor") varg1
            ca2   = nApp (gvar "PreludeBase" "constructor") varg2
            hash  = Case CNormal varg1 halts Nothing
            halts = map hashalt ctrs
            -- (C,C) -> true, (C1 a1 a2, C1 b1 b2) -> a1 == b1 && a2==b2
            mkequalalt con = calt (ptup peq1 peq2) eqex
                where
                    a = arity con
                    peq1 = conpat con "a"
                    peq2 = conpat con "b"
                    sub1 = take a (subvars "a")
                    sub2 = take a (subvars "b")
                    eqex = andit (map eqit (zip sub1 sub2))
                    eqit (a,b) = nApp (nApp opEq a) b
                    andit [] = vTrue
                    andit [x] = x
                    andit (x:xs) = nApp (nApp (gvar "PreludeBase" "&&") x) (andit xs)
            hashalt con = calt p hashex
                where
                    a = arity con
                    p = conpat con "a"
                    vs = take a (subvars "a")
                    c = nApp (gvar "PreludeBase" "constructor") varg1
                    hs = map (nApp opHash) vs
                    hfun a b = mkop (mkop (int 31) opMul a) opAdd b
                    hashex = fold hfun (int 1) (c:hs)  
        -- derive Ord
        deriveClass "Ord"
            | [prod] <- ctrs = [publicfun "<=>"
                                          [conpat prod "a", conpat prod "b"]
                                          (ordex (arity prod) 0)]
            | otherwise = [publicfun  "<=>" [parg1, parg2] outercase]
            where
                --* case a1 <=> b1 of { Eq -> case a2 <=> b2 of { ...
                ordex a n
                    | a == n    = vEq
                    | a == n+1  = comp
                    | otherwise = Case CNormal comp [calt1, calt2] Nothing
                    where
                        cmp = gvar2 "PreludeBase" "Ord" "<=>"
                        va  = var ("a" ++ show (n+1))
                        vb  = var ("b" ++ show (n+1))
                        comp = nApp (nApp cmp va) vb
                        calt1 = calt pEq (ordex a (n+1))
                        calt2 = calt (pvar "r") (var "r")
                --*  (C ai, C bi) -> ordex ai bi
                mkeqcase con = calt (ptup peq1 peq2) oex
                    where
                        a = arity con
                        peq1 = conpat con "a"    -- C a1 a2 .. an
                        peq2 = conpat con "b"    -- C b1 b2 .. bn
                        oex  = ordex a 0
                outercase = Case CNormal  defex [alt1, alt2] Nothing
                defex     = nApp (nApp (gvar2 "PreludeBase" "Ord" "<=>") oa1) oa2
                oa1       = nApp (gvar "PreludeBase" "constructor") varg1
                oa2       = nApp (gvar "PreludeBase" "constructor") varg2
                alt1      = calt pEq cas
                alt2      = calt (pvar "x") (var "x")
                cas       = if isEnum then vEq else Case CNormal (vtup varg1 varg2) eqexs Nothing
                eqexs     = (map mkeqcase ctrs) ++ [defalt]
                defalt    = calt (pvar "_") vEq
        deriveClass "Show"
            | forty.name.base ~ #^\(,+\)# = let             -- tuple
                    sex     = Case CNormal (var "r") [(mktupshowalt con)] Nothing
                    show    = publicfun "show"     [pvar "r"]  sex
                    showsub = publicfun "showsub"  []          (var "show")
                in [show, showsub]
            | otherwise = let
                    sex =   Case CNormal (var "r") (mkshowalts ctrs) Nothing
                    subex = Case CNormal (var "r") (mkshowsubalts ctrs) Nothing
                    show    = publicfun "show"      [pvar "r"]  sex
                    showsub = publicfun "showsub"   [pvar "r"]  subex
                in [show, showsub]
            where
                mkshowalts    constr = map mkshowalt constr
                mkshowsubalts constr = map mkshowsubalt constr
                mkshowalt :: Symbol -> CAltS
                mkshowalt con = calt (conpat con "a") sx
                    where
                        scon = string (con.name.base)
                        sub  = take (arity con) (subvars "a")
                        sx   = joinit scon sub
                        blanked s  = s `mkapp` string " "
                        showit v   = gvar "PreludeText" "showsub" `nApp` v
                        showsv s v = blanked s `mkapp` showit v
                        joinit s [] = s
                        joinit s (v:vs) = joinit (showsv s v) vs
                mkshowsubalt con =
                    let
                        salt = mkshowalt con
                        subx = (string "(" `mkapp` salt.ex) `mkapp` string ")"
                    in if arity con == 0 then salt
                        else salt.{ex=subx}
                mktupshowalt con = calt (conpat con "a") sx where
                    scon = string "("
                    sub  = take (arity con) (subvars "a")
                    sx = joinit scon sub
                    showsv s v d = (s `mkapp` showit v) `mkapp` string d
                    joinit s [] = s `mkapp` string ")"
                    joinit s [v] = showsv s v ")"
                    joinit s (a:b:c) = joinit (showsv s a ", ") (b:c)

        deriveClass "Enum" = [ord, from, succ, pred]  -- , eq]
            where
                -- eq      = publicfun "=="    [pvar "a", pvar "b"]  eqex
                ord     = publicfun "ord"   [pvar "r"]      oex
                from    = publicfun "from"  [pvar "r"]      fex
                succ    = publicfun "succ"  [pvar "r"]      sex
                pred    = publicfun "pred"  [pvar "r"]      pex
                -- eqex    = (opEq `nApp`
                --             ((var "<=>" `nApp` var "a") `nApp` var "b")) `nApp`
                --                 pEq
                ctup    = sortBy (comparing Symbol.cid) ctrs
                ctdn    = reverse ctup
                oex     = nApp (gvar "PreludeBase" "constructor") (var "r")
                fex     = Case CNormal (var "r") (map fromalt ctup ++ [last]) Nothing
                sex     = Case CNormal (var "r") (mkalts "succ " ctup) Nothing
                pex     = Case CNormal (var "r") (mkalts "pred " ctdn) Nothing
                last    = calt (pvar "_") (nApp vError msg)        -- _ -> error ...
                msg     = (string (forty.name.nice g)
                          `mkapp` string ".from ")
                          `mkapp` showit (var "r")                  -- "X" ++ ".from " ++ show r
                fromalt ctr = calt (pint (Symbol.cid ctr)) (Con {name=cname ctr, pos, typ=Nothing})
                mkalts s [x] = [calt (conpat x "_") (nApp vError (string (s ++ show (cname x))))]
                mkalts s (x:y:zs) = calt (conpat x "_") (Con  {name=cname y, pos, typ = Nothing}) : mkalts s (y:zs)
                mkalts s [] = []

        deriveClass "Bounded" = [minval, maxval]
            where
                ctup    = sortBy (comparing Symbol.cid) ctrs
                ctdn    = reverse ctup
                min     = Con {name=cname (head ctup), pos, typ = Nothing}
                max     = Con {name=cname (head ctdn), pos, typ = Nothing}
                maxval  = publicfun "maxBound" [] max
                minval  = publicfun "minBound" [] min

        deriveClass s = error ("can't deriveClass " ++ s)

    case clas of
        TName ppp ccc | inPrelude ppp g,
                        ccc `elem` ["Enum", "Bounded"] -> if all (0==) (map arity ctrs)
            then stio (deriveClass ccc)
            else do
                let bad = [ c.name.nice g | c <- ctrs, arity c != 0 ]
                U.error pos (msgdoc ("Can't derive " ++ clas.nice g
                    ++ " for " ++ forty.nice g ++ " because "
                    ++ (if length bad == 1 then head bad ++ " is not a nullary constructor"
                        else joined ", " bad ++ " are not nullary constructors")))
                stio []

        TName ppp ccc | inPrelude ppp g,
                        ccc `elem` derivable -> stio (deriveClass ccc)
        _ -> do
            U.error pos (msgdoc ("Can't derive " ++ clas.nice g
                ++ ", only Prelude classes Eq, Ord, Enum, Bounded and Show may be derived."))
            stio []
