-- enable UTF-8: «««««••••••••••••»»»»»»
{--
 * This package implements the first compiler pass after lexical analysis.
 * It fixes the list of definitions by incorporating document comments into
 * definitions, and joining separate equations of functions that come out as
 * separate 'FunDcl' definitions from parsing.

 * The function 'fixdefs' will also be used from other modules for fixing
 * sub definitions.
 -}


package frege.compiler.Fixdefs where



import frege.List(Tree)
-- import all from data
import frege.compiler.Data        as D
import frege.compiler.Nice except (group, break)
import frege.compiler.Utilities   as U()

{--
 *  Post condition for import pass
 *  - no DocDcls anymore
 *  - no 2 FunDcl with same name
 -}
post :: StG Bool
post = stio true

pass :: StG (String, Int)
pass = do
        g <- getST
        newdefs <- fixdefs g.definitions
        changeST Global.{sub <- SubSt.{definitions = newdefs}}
        stio ("definitions", length g.definitions)




{--
    transform definitions by first 'unDoc'ing, then 'funJoin'ing, then desugaring
    pattern bindings
 -}
fixdefs :: [DefinitionS] -> StG [DefinitionS]
fixdefs defs = do
    ds <- unDoc defs
    fs <- funJoin ds
    ls <- unlet fs
    checkUniq [ (name,poss) | FunDcl {name,poss} <- ls ]
    stio ls

checkUniq [] = stio ()
checkUniq ((name,pos):as) = do
    let other = [ head pos | (same,pos) <- as, same == name ]
    unless (null other) do
        U.error (head other) (msgdoc ("redefinition of  `"
                                                ++ name
                                                ++ "` introduced line " ++ show pos))
    checkUniq as

{--
    Desugar pattern bindings
    > (a,b) = expr
    that come as pseudo function bindings
    > let (a, b) = expr
    to
    > let = expr
    > a = case let of (a,b) -> a
    > b = case let of (a,b) -> b
    -}
unlet (f:fs)
    | FunDcl{poss=[pos],name=´let\$\d+$´,pats=[pat]} <- f = do
        -- u <- U.uniqid
        let it = f.{pats=[]}
            vlet = Vbl (pos.change VARID it.name) (Simple pos.first.{tokid=VARID, value=it.name}) Nothing 
            ds = map mkFun (U.patVars pat)
            mkFun PVar{pos,var} = f.{poss=[pos], name=var, pats=[], 
                    expr=Case CNormal vlet [CAlt{pat, ex=vbl}] Nothing}
                where
                    vbl = Vbl (pos.change VARID var) 
                              (Simple pos.first.{tokid=VARID, value=var}) Nothing
            mkFun _ = error "mkFun"
        fs <- unlet fs
        stio ((it:ds) ++ fs)
    | otherwise = do
        fs <- unlet fs
        stio (f:fs)                                      
unlet [] = stio []
{--
 * apply a series of docs to a subsequent definition
 -}
unDoc :: [DefinitionS] -> StG [DefinitionS]
unDoc [] = stio []
unDoc (defs@(d:ds))
    | DocDcl {pos} <- d      = do r <- apply doc rest; unDoc r
    | d.{defs?}              = do ndefs <- fixdefs d.defs
                                  liftM2 (:) (stio d.{defs=ndefs}) (unDoc ds)
    | otherwise              = liftM2 (:) (stio d) (unDoc ds)
    where
        pos  = d.pos
        docs = takeWhile isDoc defs
        rest = dropWhile isDoc defs
        isDoc (DocDcl {pos}) = true
        isDoc _              = false
        doc  = joined "\n\n" (map Definition.text docs)
        apply :: String -> [DefinitionS] -> StG [DefinitionS]
        apply str []     = do U.warn pos (msgdoc ("documentation at end of file")); stio []
        apply str (d:ds) = case d of
            ImpDcl {pos=p} -> do
                U.warn p (msgdoc ("there is no point in documenting an import, documentation from line "
                    ++ show pos ++ " ignored."))
                stio (d:ds)
            FixDcl {pos=p} -> do
                U.warn p (msgdoc ("there is no point in documenting a fixity declaration, documentation from line "
                    ++ show pos ++ " ignored."))
                stio (d:ds)
            def | Just s <- def.doc = stio (def.{doc = Just (str ++ "\n\n" ++ s)}  : ds)
                | otherwise         = stio (def.{doc = Just str} : ds)

{--
 * look for adjacent function definitions with same name and join them
 -}
funJoin :: [DefinitionS] -> StG [DefinitionS]
funJoin [] = stio []
funJoin (defs@(d:ds))
    | FunDcl {poss,name} <- d, name != "let" = liftM2 (:) (joinFuns funs) (funJoin next)
    | otherwise                             = liftM2 (:) (stio d)        (funJoin ds)
    where
        name = d.name
        funs = takeWhile sameFun defs
        next = dropWhile sameFun defs
        sameFun (FunDcl {name=n}) = n == name
        sameFun _                 = false
        joinFuns :: [DefinitionS] -> StG DefinitionS
        joinFuns [f] = stio f
        joinFuns (fs@(f:_))
            | null f.pats = do
                    U.error (head f.poss) (msgdoc "function binding without patterns must have only a single equation")
                    stio f
            | (g:_) <- filter (\x -> Definition.vis x != f.vis) fs = do
                    U.error (head g.poss) (msgdoc ("the visibility of " ++ g.name ++
                                    " must match that of the equation in line " ++ show (head f.poss)))
                    stio f
            | (g:_) <- filter (\x -> length (Definition.pats x) != length f.pats) fs = do
                    U.error (head g.poss) (msgdoc ("number of patterns (" ++ show (length g.pats) ++
                                   ") must be the same as in previous equations (" ++
                                   show (length f.pats)))
                    stio f
            | otherwise = stio result  -- all equations have same # of patterns and visibility
            where
                arity  = length f.pats
                poss   = map (head • Definition.poss) fs
                pos    = head poss
                result = f.{poss, pats = newpats, expr = newexpr, doc = newdoc}
                newvars = [ Vbl  (pos.change VARID ("_"++i)) (Simple pos.first.{tokid=VARID, value="_" ++ i}) Nothing | i <- take arity U.allBinders]
                newpats = [ PVar (pos.change VARID ("_"++i)) 0 ("_" ++ i) | i <- take arity U.allBinders]
                newexpr = Case CNormal (U.mkTuple Con pos newvars) alts Nothing
                alts    = [ CAlt {pat=U.mkpTuple (head g.poss) g.pats, ex = g.expr} |
                             (g::DefinitionS) <- fs ]
                olddoc  = [ s | Just s <- map Definition.doc fs ]
                newdoc  = if null olddoc then Nothing else Just (joined "\n\n" olddoc)
        joinFuns [] = error "fatal compiler error: joinFuns []"
