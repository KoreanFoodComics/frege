package frege.data.Compose where

data Compose f g a = Compose { run :: f (g a) }

compose :: f (g a) -> Compose f g a
compose = Compose

instance Functor (Functor f, Functor g) => (Compose f g) where
  fmap f (Compose fga) = Compose (fmap (fmap f) fga)

instance Applicative (Applicative f, Applicative g) => (Compose f g) where
  return a = Compose (return (return a))
  Compose fgf <*> Compose fga = Compose ((<*>) <$> fgf <*> fga)