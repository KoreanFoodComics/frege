module frege.data.Bits 
        inline (BitSet.empty, BitSet.singleton, -- BitSet.member, 
                BitSet.subset, BitSet.null, BitSet.subset, BitSet.union,
                BitSet.==, BitSet.<=>)
    where

import frege.control.Monoid

data BitSet e = BitSet { !set :: Long } where
    --- The empty set
    empty :: BitSet α
    empty  = BitSet 0L
    --- The universal set
    universal :: (Enum α, Bounded α) => BitSet α
    universal = -- fromList (minBound .. maxBound)
                    mapset trans (singleton maxBound) where 
            trans l = l+l-1L
            mapset :: (Long -> Long) -> BitSet α -> BitSet α
            mapset f bs = BitSet (f bs.set)
                     
    --- A set with one argument
    singleton :: Enum α => α -> BitSet α
    singleton !a = BitSet (1L `bshl` ord a)
    --- @a `union` b@ -- a set with all elements that are members of a or members of b
    union :: BitSet α -> BitSet α -> BitSet α
    union BitSet{set=set1} BitSet{set=set2}  = BitSet (set1 `bor` set2)
    --- @a `intersection` b@ -- a set with all elements that are members of a and members of b
    intersection :: BitSet α -> BitSet α -> BitSet α
    intersection BitSet{set=set1} BitSet{set=set2}  = BitSet (set1 `band` set2)
    --- @a `difference` b@ -- a set with all elements that are members of a and not members of b
    difference :: BitSet α -> BitSet α -> BitSet α
    difference BitSet{set=set1} BitSet{set=set2}  = BitSet (set1 `band` bcmpl set2)
    --- @a `unionE` e@ = @a `union` {e}`@
    unionE bs = union bs . singleton
    --- @a `intersectionE` e@ = @a `intersection` {e}`@
    intersectionE bs = intersection bs . singleton
    --- @a `differenceE` e@ = @a `difference` {e}`@
    differenceE bs = difference bs . singleton
    
    --- Predicate to tell if the set is empty
    null :: BitSet α -> Bool
    null BitSet{set} = set == 0L    
    --- Predicate to tell if an element is a member of a set
    member :: Enum α => α -> BitSet α -> Bool
    member a bs = singleton a `subset` bs
    --- Predicate that tells if one set is a subset of another
    subset :: BitSet α -> BitSet α -> Bool
    subset BitSet{set=set1} BitSet{set=set2} = (set1 `band` set2) == set1
    
    --- tell the number of elements in a 'BitSet'
    size BitSet{set} = go set 0 where
        go 0L n = n
        go s  n
            | even s    = go (s `ushr` 1) n
            | otherwise = go (s `ushr` 1) (n+1)
            
    --- convert a list to a 'BitSet'
    fromList = fold (\acc\e -> acc `union` singleton e) empty
    --- convert a 'BitSet' to a list
    toList :: Enum α => BitSet α -> [α]
    toList BitSet{set} = go set 0
        where
            go 0L !c = []
            go  n !c 
                | odd  n    = Enum.from c : go (n `ushr` 1) (c+1)
                | otherwise = go (n `ushr` 1) (c+1)  
    
instance Monoid (BitSet a) where
    mempty  = BitSet.empty
    mappend = BitSet.union
        
instance Empty BitSet

instance Eq (BitSet a) where
    ba == bb = ba.set == bb.set
    hashCode bs = hashCode bs.set

instance Ord (BitSet a) where
    ba <=> bb = ba.set <=> bb.set

instance Show (Show a, Enum a) => BitSet a where
    show bs = "{" ++ joined ", " members ++ "}" where
        members = map show bs.toList
    showsub = BitSet.show