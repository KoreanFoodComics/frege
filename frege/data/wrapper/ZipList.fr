package frege.data.wrapper.ZipList where

import frege.control.Monoid
import frege.control.Foldable as F ()
import frege.control.Traversable as T ()

data  ZipList a = ZipList { get :: [a] }

instance Functor ZipList where
    fmap f (ZipList xs) = ZipList (map f xs)

instance Applicative ZipList where
    return x = ZipList (repeat x)
    ZipList fs <*> ZipList xs = ZipList (zipWith id fs xs)

instance ListSource ZipList where
    toList (ZipList xs) = xs    

instance Empty ZipList where 
    empty = ZipList []
    null (ZipList xs) = null xs
  
instance ListLike ZipList where
    ZipList xs ++ ZipList ys = ZipList (xs ++ ys)  
    head (ZipList (x : _)) = x 
    head _ = error "head on empty ZipList"
    tail (ZipList (_ : xs)) = ZipList xs
    tail _ = error "tail on empty ZipList"
    length (ZipList xs) = length xs
   
instance Semigroup ZipList a where
    mappend xs ys = xs ++ ys

instance Monoid ZipList a where
    mempty = ZipList []
    
instance F.Foldable ZipList where
    foldr f x (ZipList xs) = Prelude.foldr f x xs
    foldl f x (ZipList xs) = Prelude.foldl f x xs

instance T.Traversable ZipList where
    traverse f (ZipList xs) = fmap ZipList $ T.traverse f xs
   
   