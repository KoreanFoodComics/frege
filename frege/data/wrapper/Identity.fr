package frege.data.wrapper.Identity where

import frege.control.Foldable as F ()
-- import frege.control.Traversable as T ()
import frege.control.Monoid

{--
  
The identity functor and monad.

This trivial type constructor serves two purposes:

* It can be used with functions parameterized by a 'Functor' or 'Monad'.

* It can be used as a base monad to which a series of monad
  transformers may be applied to construct a composite monad.
  Most monad transformer modules include the special case of
  applying the transformer to 'Identity'.  For example, @State s@
  is an abbreviation for @StateT s 'Identity'@. 
-}


--- Identity functor and monad.
data Identity a = Identity { run :: a }

-- Identity instances for Functor and Monad

instance Functor Identity where
    fmap f m = Identity (f (Identity.run m))

instance F.Foldable Identity where
    foldMap f (Identity x) = f x


instance Applicative Identity where
    return  a = Identity a
    Identity f <*> Identity x = Identity (f x)

instance Monad Identity where
    m >>= k  = k (Identity.run m)

instance Semigroup Semigroup a => Identity a where
   Identity x `mappend` Identity y = Identity (x `mappend` y)

instance Monoid Monoid a => Identity a where
   mempty = Identity mempty 
   
instance ListSource Identity where
   toList (Identity x) = [x]   
   

