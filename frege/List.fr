{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}


{--
    Additional functions for lists as well as closely related data types
    and type classes like 'Tree', 'Map' and 'Set' with their operations.
-}
package frege.List where


{--
    > grep rx strs = filter (~ rx) strs
    Returns the list of strings in /strs/ that match the regular expression /rx/.

    See also 'filter', '~'
    -}
grep rx strs = filter (~ rx) strs


--
--  also trees
--

{--
 * This type is used in place of the unary '[]' in the instance of 'Map',
 * where 'Map' can be instantiated with binary type constructors only.
 -}
type ListKV key value = [(key, value)];
-- type TreeKV key value = Tree (key, value);

class Map keyed where {
    lookup    :: forall keyed key value . Ord key => keyed key value -> key -> Maybe value;
    insert    :: forall keyed key value . Ord key => keyed key value -> key -> value -> keyed key value;
    update    :: forall keyed key value . Ord key => keyed key value -> key -> value -> keyed key value;
    delete    :: forall keyed key value . Ord key => keyed key value -> key -> keyed key value;
    keyvalues :: forall keyed key value . Ord key => keyed key value -> Ordering -> [(key, value)];
    fromList  :: forall keyed key value . Ord key => [(key, value)]  -> keyed key value;
    each      :: forall keyed key value . Ord key => keyed key value -> [(key, value)];
    each k = keyvalues k Eq;
};

type Set a b  = [(a, b)];

iselem [] key = Nothing;
iselem ((k,v):xs) key = case key <=> k of {
        Lt -> iselem xs key;
        Eq -> Just v;
        Gt -> Nothing;
    };

{-
instance Map ListKV where {
    // t_key   :: [(Ord:key, value)] -> key;
    // t_value :: [(Ord:key, value)] -> value;
    lookup ( []) key = Nothing;
    lookup ( ((k,v):xs)) key = if k != key then lookup ( xs) key else Just v;
    // insert :: [(Ord:k,v)] -> Ord:k -> v -> [(Ord:k,v)];
    insert ( []) key value =  [(key, value)];
    insert ( xs) key value = case lookup ( xs) key of {
        Nothing ->  ((key, value):xs);
        Just _  -> error "duplicate insert";
    };
    // update [] key value =  [(key, value)];
    update xs key value = ListKV.insert (ListKV.delete xs key) key value;
    // update xs key value = let xs' = xs.delete key in xs'.insert key value;
    // delete = undefined;
    delete [] key = [];
    delete ( xs) key   =  filter ((key!=) @ fst) xs;
    keyvalues ( xs) Lt = sortBy (\(k1,_)\(k2,_) -> k1 <= k2) xs;
    keyvalues ( xs) Gt = sortBy (\(k1,_)\(k2,_) -> k2 <= k1) xs;
    keyvalues ( xs) Eq = xs;
    fromList xs =  xs
};
-}

data Tree k v = Nil | Node Int (Tree k v) (Tree k v) k v where {
    depth (Node _ l r _ _) = max (depth l) (depth r);
    depth _ = 0;

    height (Node h _ _ _  _) = h;
    height _ = 0;

    balance (Node _ l r _ _) = height l - height r;
    balance _ = 0;

    rotright (Node _ (Node _ ll lr lk lv) r k v) = let
        sx = 1 + max (height lr) (height r);
        x = Node sx lr r k v;
        sa = 1 + max (height ll) (height x);
        a = Node sa ll x lk lv;
    in a;
    rotright t = t;
    rotleft (Node _ l (Node _ rl rr rk rv) k v) = let
        sx = 1 + max (height l) (height rl);
        x = Node sx l rl k v;
        sb = 1 + max (height x) (height rr);
        b = Node sb x rr rk rv;
    in b;
    rotleft t = t;
    drotlr (Node s l r k v) = rotright (Node s (rotleft l) r k v);
    drotlr nil = nil;
    drotrl (Node s l r k v) = rotleft  (Node s l (rotright r) k v);
    drotrl nil = nil;
    rebalance (x@Node s l r k v) =
        if hl + 1 < hr then
            if balance r < 1 then rotleft x else drotrl x
        else if hl > hr + 1 then        -- left subtree higher
            if balance l >= 0 then rotright x else drotlr x
        else x where {
            hl = height l;
            hr = height r;
        };
    rebalance nil = nil;
    heightchange (Node a _ _ _ _) Nil = (+1);
    heightchange Nil (Node a _ _ _ _) = (subtract 1);
    heightchange (Node a _ _ _ _) (Node b _ _ _ _) = case a <=> b of {
        Lt -> (+1);
        Eq -> id;
        Gt -> (subtract 1);
    };
    heightchange Nil Nil = id;
    leftmost (this@Node _ Nil _ _ _) =  this;
    leftmost (Node _ l _ _ _) = leftmost l;
    leftmost Nil              = error "Tree.leftmost Tree.Nil";

    showins ident Nil = ident ++ "Nil\n";
    showins ident (Node h Nil Nil k v) = ident ++ h.show ++ (k,v).show ++ "\n";
    showins ident (Node h l r k v) =
        let
            foo = showins ident (Node h Nil Nil k v) ++ showins (ident++"  ") l
        in foo ++ showins (ident++"  ") r;
    tmap f Nil = Nil;
    tmap f (Node i l r k v) = Node i (tmap f l) (tmap f r) k  (f v);
    map = tmap;
    insertlist t kvs = fold ins t kvs where
        ins t (k,v) = Tree.insert t k v
    ;
    --- version of lookup that is optimised for Strings
    lookupS    :: Tree String value -> String -> Maybe value;
    lookupS (Node _ l r !k1 v) !k =
                    case k <=> k1 of {
                        Lt -> lookupS l k;
                        Gt -> lookupS r k;
                        Eq -> Just v;
                    };
    lookupS nil _ = Nothing;
};

updatekv k v t = Tree.update t k v;
insertkv k v t = Tree.insert t k v;
deletek  k   t = Tree.delete t k;


derive Show  Tree k v;

instance Empty (Tree a) where
    null Nil = true
    null _ = false
    empty = Nil
;

instance Map Tree where {
    -- t_key   :: Tree (Ord:key, value) -> Ord:key;
    -- t_value :: Tree (Ord:key, value) -> value;
    insert (Node s l r  k1 v1) !k !v =
        case k <=> k1 of {
            Lt -> case insert l k v of {
                    !nl -> case 1 + max (Tree.height nl) (Tree.height r) of {
                        !ns -> Tree.rebalance (Node ns nl r k1 v1)
                    }
                  };
            Eq -> Node s l r k v;
            Gt -> case insert r k v of {
                    !nr -> case 1 + max (Tree.height l) (Tree.height nr) of {
                        !ns -> Tree.rebalance (Node ns l nr k1 v1)
                    }
                  }
        };
    insert nil k v = Node 1 Nil Nil k v;
    update t k v = insert t k v;
    delete (x@Node _ Nil Nil k1  _) k = if k == k1 then Nil else x;
    -- delete   (Node s l r (kv1@(k1,v1))
    delete   (Node _ l   Nil k1 v1) k = if k == k1 then l else
        let
            nl = delete l k;
            s' = 1 + Tree.height nl;
        in Tree.rebalance (Node s' nl Nil k1 v1);
    delete (Node _ Nil r   k1 v1) k = if k == k1 then r else
        let
            nr = delete r k;
            s' = 1 + Tree.height nr;
        in Tree.rebalance (Node s' Nil nr k1 v1);
    delete (Node s l r k1 v1) k =
        case k <=> k1 of {
            Lt -> let
                nl = delete l k;
                ns = 1 + max (Tree.height nl) (Tree.height r);
            in Tree.rebalance (Node ns nl r k1 v1);
            Gt -> let
                nr = delete r k;
                ns = 1 + max (Tree.height l) (Tree.height nr);
            in Tree.rebalance (Node ns l nr k1 v1);
            Eq -> case Tree.leftmost r of
                Node ls _ _ lk lv -> let    -- r may not be Nil here, see above
                        nr = delete r lk;
                        ns = 1 + max (Tree.height l) (Tree.height nr);
                    in Tree.rebalance (Node ns l nr lk lv);
                Nil -> error "cannot happen";
        };
    delete nil k = nil;
    lookup    :: forall value key . Ord key => Tree key value -> key -> Maybe value;
    -- lookup Nil _ = Nothing;
    lookup (Node _ l r !k1 v) !k =
                    case k <=> k1 of {
                        Lt -> lookup l k;
                        Gt -> lookup r k;
                        Eq -> Just v;
                    };
    lookup nil _ = Nothing;


    -- keyvalues :: (Tree (Ord:a, b)) -> Ordering -> [(Ord:a, b)];
    keyvalues t order = let
        kv (Node _ l r key v) acc = case order of {
            Lt -> kv l ((key,v): kv r acc);
            Gt -> kv r ((key,v): kv l acc);
            Eq -> (key,v) : kv l (kv r acc);
        };
        kv nil acc = acc;
        in kv t [];

    fromList = Tree.insertlist Nil;
    each t = kv t [] where
        kv (Node _ l r key v) acc = (key,v) : kv l (kv r acc)
        kv nil acc = acc
};

--type XTree a b = Tree a b;
type OrdSet a  = Tree a ();
emptySet :: OrdSet a;
emptySet = Tree.Nil;
including s o = Tree.insert s o ();
contains  s o
    | Nothing <- Tree.lookup s o = false
    | otherwise = true;
isEmpty Tree.Nil = true;
isEmpty _ = false;
fromKeys = Tree.fromList • map (flip (,) ());    -- (\x -> (x,()));
union s1 s2 = let kv = Tree.keyvalues s2 Eq in Tree.insertlist s1 kv;
intersection s1 s2 = let
                        b = [ x | x <- keys s1, s2 `contains` x ]
                    in fromKeys b;
diff s1 s2 = let
                b = [ x | x <- keys s1, !(s2 `contains` x) ]
            in fromKeys b;


-- keys t   = [ f | (f,_) <- (keyvalues  t Eq)];
-- values t = [ s | (_,s) <- (keyvalues  t Eq)];

keys t = kv t [] where
        kv (Node _ l r key v) acc = key : kv l (kv r acc)
        kv nil acc = acc
;
values t = kv t [] where
        kv (Node _ l r key v) acc = v : kv l (kv r acc)
        kv nil acc = acc
;
