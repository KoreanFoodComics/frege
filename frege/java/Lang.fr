{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.
    
    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:
    
        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
    
        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission. 
        
    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
 * Here live all classes and interfaces from @java.lang@ except those already
 * introduced in the Prelude.
 *
 * A concrete frege type for java class Foo can then be obtained by:
 * > type Foo = FooT RealWorld          // for IO only types
 * > type Foo = FooT                    // for pure types
 * > type Foo = FooT Immutable          // for ST s types that have pure operations
 * > data FooT s = native java.Foo      // for mutable tyes
 * > data FooT = pure native java.Foo   // for immutable ones

 *
 * Overloaded functions can be disambiguated by
 * - number of argments, i.e. @add1@, @add2@, @add3@ for the 1, 2 or 3 argument versions
 * - appropriate encoding of the signature, i.e. @addDouble@, @addInt@
 *
 * Such renaming shall follow the principle of least surprise, and the documentation
 * shall state clearly which java method will be called in the end.
 -}


package frege.java.Lang where

--- shorthand for runnables in the 'IO' monad
type Runnable = RunnableT RealWorld

--- A @java.lang.Runnable@, can be created from 'IO' or 'ST' actions
data RunnableT s = native java.lang.Runnable where
    --- Create a java Runnable from a 'ST' @s@ '()'.
    --- When the @run@ method is called from java code, the ST action will be performed.
    native new frege.runtime.SwingSupport.runnable :: ST s () -> ST s (RunnableT s)
    --- perform the ST action that is associated with this runnable. 
    native run :: RunnableT s -> ST s ()

-- Class Loading & Resources
private pure native md "frege.runtime.Meta.FregePackage.class" :: Class
type ClassLoader = ClassLoaderT RealWorld
data ClassLoaderT σ = native java.lang.ClassLoader where
        native getClassLoader :: Class -> IO ClassLoader
        current = getClassLoader md

data System = pure native java.lang.System where
    pure native getenv       java.lang.System.getenv            :: String -> Maybe String
    pure native getProperty  java.lang.System.getProperty       :: String -> Maybe String
    native exit              java.lang.System.exit              :: Int -> IO ()
    native currentTimeMillis java.lang.System.currentTimeMillis :: () -> IO Long