{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.
    
    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:
    
        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
    
        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission. 
        
    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
 * Definitions for native components found in packages @java.awt@, @java.awt.event@
 -}
 
package frege.java.Awt where

-- import frege.j.Util

   
type Component = ComponentT RealWorld
--- a bare @java.awt.Component@
data ComponentT s = native java.awt.Component where
    native setEnabled :: ComponentT s -> Bool -> ST s () 
    native setVisible :: ComponentT s -> Bool -> ST s ()
   

type Container = ContainerT RealWorld
--- a bare @java.awt.Container@
data ContainerT s = native java.awt.Container where
    native add :: Container -> Component -> IO Component
    native setLayout :: Container -> LayoutManager -> IO ()

type LayoutManager = LayoutManagerT RealWorld
data LayoutManagerT s = native java.awt.LayoutManager 

type Window = WindowT RealWorld
--- some @java.awt.Window@
data WindowT s = native java.awt.Window where
        native pack :: Window -> IO ()


-- ------------------ AWTEvent ----------------------------

--- a shorthand for 'AWTEventT' in the 'IO' Monad    
type AWTEvent = AWTEventT RealWorld
--- an object with compile timt type @java.awt.AWTEvent@
data AWTEventT s = native java.awt.AWTEvent


-- ----------------------- ActionEvent ------------------------

--- a shorthand for 'ActionEventT' in the 'IO' Monad    
type ActionEvent = ActionEventT RealWorld
--- an object with compile timt type @java.awt.event.ActionEvent@
data ActionEventT s = native java.awt.event.ActionEvent where
    pure native alt_mask   java.awt.event.ActionEvent.ALT_MASK   :: Int
    pure native ctrl_mask  java.awt.event.ActionEvent.CTRL_MASK  :: Int
    pure native meta_mask  java.awt.event.ActionEvent.META_MASK  :: Int
    pure native shift_mask java.awt.event.ActionEvent.SHIFT_MASK :: Int
    native getActionCommand :: ActionEventT s -> ST s String
    native getModifiers     :: ActionEventT s -> ST s Int


-- ---------------- ActionListener ----------------------

--- a shorthand for 'ActionListenerT' in the 'IO' Monad    
type ActionListener = ActionListenerT RealWorld
--- an object with compile time type @java.awt.event.ActionListener@
data ActionListenerT s = native java.awt.event.ActionListener where
    native actionPerformed :: ActionListenerT s -> ActionEventT s -> ST s ()
    --- make an action listener from a function
    native new frege.runtime.SwingSupport.actionListener 
                           :: (ActionEventT s -> ST s ()) -> ST s (ActionListenerT s)

-- ------------------- Frame --------------------------------
data FrameT s = native java.awt.Frame where
    native setTitle :: FrameT s -> String -> ST s ()    
