{-
    Copyright Â© 2011, Ingo Wechsung
 
    All rights reserved.
 
    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

    -   Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

    -   Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.
 
    *THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.*
-}

{--
 *
 * This package provides basic definitions for the Frege language.
 *
 * The /Prelude/ packages are imported explicitely or implicetely during compilation
 * of any other package.
 * They define basic data structures, classes and functions.
 *
 *
 * This package is /implementation specific/ insofar as the compiler may
 * assume that certain items are defined here in a certain way.
 * Changes may thus lead
 * to compiler crashes or java code that will be rejected by the java compiler.
 -}

{-
 * $Author$
 * $Revision$
 * $Id$
 * $Date$
-}


protected package frege.prelude.Arrays where

import frege.prelude.PreludeBase
import frege.prelude.PreludeList(length, map, fold)
import frege.prelude.PreludeMonad

-- Arrays
type Array e = STArray e Immutable
instance Cloneable (STArray elem) where
    native our frege.runtime.Runtime.our :: STArray elem s -> ST s (Array elem)
    
-- instance ListSource Array    

data STArray elem s = native "frege.runtime.Array" where
    native      new                           :: Int -> Mutable (STArray elem) s
    pure native length                        :: STArray elem x -> Int
    native      setAt                         :: STArray elem s -> Int -> elem -> ST s ()

    --- set array element to value v when passed @(Just v)@ or null (Nothing)
    native      setAtMB           setAt       :: STArray elem s -> Int -> Maybe elem -> ST s ()
    --- Fetch array element and return @Just v@, if it is not a null value, otherwise @Nothing@
    native      getAt                         :: STArray elem s -> Int -> ST s (Maybe elem)
    --- Fetch array element  *without* checking for @null@ value.
    --- To be used only when it is sure that there are no @null@ values in the array.
    native      elemAt            getAt       :: STArray elem s -> Int -> ST s elem
    --- Fetch array element form a frozen array
    pure native frozenGetAt       getAt       :: Array elem -> Int -> Maybe elem
    --- Fetch array element from a frozen array *without* checking for @null@ value.
    pure native frozenElemAt      getAt       :: Array elem -> Int -> elem

    --- Create array from (finite) list.
    --- The resulting Array does not contain null values
    fromListST :: [elem] -> ST u (STArray elem u)
    fromListST elems = (Array.new elems.length >>= loop 0 elems) where
        loop j (x:xs) arr = do Array.setAt arr j x; loop (j+1) xs arr
        loop j []     arr = return arr
    --- create an immutable arra from a list
    fromList elems = ST.run (fromListST elems >>= our)

    --- Collect non-null elements from an immutable array.
    toList a = elems a 0 -- [ e | Just e  <- [ a.[i] | i <- 0..a.length-1 ]];
        where
            elems a i
                | i < Array.length a = case Array.frozenGetAt a i of
                    Just s  -> s:elems a (i+1)
                    Nothing -> elems a (i+1)
                | otherwise = []

    {--
     * Extract all non null elements from an immutable array, togehther with
     * their indexes.
     * For arrays whose last element is not null, the following holds:
     > fromInxList (toInxList arr) == arr
     -}
    toInxList :: Array a -> [(Int, a)]
    toInxList arr = [ (i,x) | (i, Just x) <- [ (i, arr.frozenGetAt i) | i <- [0..arr.length-1]]]
    {--
      * Create a mutable array from a list of tuples ('Int', a).
      * The size of the array will be so that it can accomodate the
      * greatest index. Elements whose index does not appear in the list
      * reamin unset, i.e. they are initialised with the null value.
      *
      * Negative indexes cause java exceptions to be thrown.
      -}
    fromInxListST :: [(Int, a)] -> ST s (STArray a s)
    fromInxListST xs = Array.new n >>= loop xs where
        n = 1 + fold max 0 (map fst xs)
        loop :: [(Int, a)] -> STArray a s -> ST s (STArray a s)
        loop ((i,x):xs) arr = do
            arr.[i <- x]
            loop xs arr
        loop [] arr = return arr
    --- create immutable array using frozen result of 'Array.fromInxListST'
    fromInxList xs = ST.run (fromInxListST xs >>= our)



type StringArr = Frozen StringArray
instance Cloneable StringArray where
    native our frege.runtime.Runtime.our :: StringArray s -> ST s (Frozen StringArray)

--- native array of native strings
data StringArray s = native "java.lang.String[]" where
    --- make a new mutable string array
    native new    "java.lang.String[]"
                                                :: Int -> Mutable StringArray s
    native getAt  "frege.runtime.Array.<java.lang.String>arrayGet"
                                                :: StringArray s -> Int -> ST s (Maybe String)
    native setAt  "frege.runtime.Array.<java.lang.String>arraySet"
                                                :: StringArray s -> Int -> String -> ST s ()
    pure native frozenGetAt "frege.runtime.Array.<java.lang.String>arrayGet"
                                                :: StringArr -> Int -> Maybe String
    --- use this only if it is absolutely sure that there are no nulls in the array
    pure native elemAt "frege.runtime.Array.<java.lang.String>arrayGet"
                                                :: StringArr -> Int -> String
    --- the length of the array
    pure native length "frege.runtime.Array.<java.lang.String>arrayLen"
                                                :: StringArr -> Int
    toList (a::StringArr) = elems a 0
        where
            elems (a::StringArr) i
                | i < a.length = case frozenGetAt a i of
                    Just s  -> s:elems a (i+1)
                    Nothing -> elems a (i+1)
                | otherwise = []

    fromListST :: [String] -> ST u StringArr
    fromListST strings = (StringArr.new strings.length >>= loop 0 strings) >>= our where
        loop j (x:xs) arr = do StringArr.setAt arr j x; loop (j+1) xs arr
        loop j []     arr = return arr
    fromList strings = ST.run (fromListST strings)


type IntArr = Frozen IntArray
instance Cloneable IntArray where
    native our frege.runtime.Runtime.our :: IntArray s -> ST s (Frozen IntArray)

--- native array of primitive int
data IntArray s = native "int[]" where
    --- make a new mutable array of given size
    native      new    frege.runtime.Array.Int.arrayNew :: Int -> Mutable IntArray s
    --- get element at index from an immutable array
    pure native elemAt frege.runtime.Array.Int.arrayGet :: IntArr     -> Int -> Int
    --- get element at index from an immutable array
    pure native frozenGetAt frege.runtime.Array.Int.arrayGet :: IntArr     -> Int -> Int
    --- get element at index from a mutable array
    native      getAt  frege.runtime.Array.Int.arrayGet :: IntArray s -> Int -> ST s Int
    --- set element at index
    native      setAt  frege.runtime.Array.Int.arraySet :: IntArray s -> Int -> Int -> ST s ()
    --- get the length of the array
    pure native length frege.runtime.Array.Int.arrayLen :: IntArr -> Int

    --- create an immutable int array from a list
    fromList is   = ST.run (fromListST is >>= our)
    --- create a mutable int array from a list
    fromListST is = IntArr.new is.length >>= loop 0 is
        where
            loop :: Int -> [Int] -> IntArray s -> ST s (IntArray s)
            loop j (x:xs) iarr = do
                iarr.[j <- x]
                loop (j+1) xs iarr
            loop _ [] iarr = return iarr

    --- convert immutable array to list
    toList (arr::IntArr) = [ elemAt arr i | i <- [0 .. arr.length-1] ]

    {-- Create an immutable int array from list of tuples.
     *
     *  The first component of each tuple gives the index, the second one
     *  is the value. Array elements not mentioned in the list will be 0.
     *
     *  > (IntArr.fromList [(7,42)]).toList == [0,0,0,0,0,0,0,42]
     -}
    fromInxList xs   = ST.run (fromInxListST xs >>= our)
    fromInxListST xs = IntArr.new n >>= loop xs
        where
            n = 1 + fold max 0 (map fst xs)
            loop ((i,x):xs) arr = do
                    IntArr.setAt arr i x
                    loop xs arr
            loop [] arr = return arr


                     