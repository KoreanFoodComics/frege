{-
    $Author$
    $Revision$
    $Id$
    $Date$
-}


--- This module deals with Semigroups and Monoids
--- Contributed by Daniel Gronau


package frege.control.Monoid  where

infixr 6 `<>`

(<>) = mappend

class Semigroup this where
  mappend :: this -> this -> this
  --doesn't support empty lists, use mconcat if possible
  sconcat :: [this] -> this
  sconcat xs = foldr Semigroup.mappend (head xs) (tail xs)
  --doesn't support factor of 0, use mtimes if possible
  stimes :: Int -> this -> this
  stimes n x | n < 1 = error "factor must be positive"
             | n == 1 = x
             | n `rem` 2 == 0 = Semigroup.stimes (n `quot` 2) $ Semigroup.mappend x x
             | otherwise = Semigroup.mappend x $ Semigroup.stimes (n `quot` 2) $ Semigroup.mappend x x 
  
class Monoid Semigroup this => this where
  mempty :: this 
  mconcat :: [this] -> this
  mconcat = foldr Semigroup.mappend Monoid.mempty  
  mtimes :: Int -> this -> this
  mtimes 0 _ = Monoid.mempty
  mtimes n x = Semigroup.stimes n x 
  
-- List ----------------------------------------------------------------------- 

instance Semigroup [a] where
  mappend = (++)
instance Monoid [a] where
  mempty = []

instance Monoid String where
    mappend = (++)
    mempty  = String.empty
    
-- Unit -----------------------------------------------------------------------

instance Semigroup () where
  _ `mappend` _ = ()  
instance Monoid () where
  mempty = ()  
  
-- Product --------------------------------------------------------------------  
  
data Product a = Product { getProduct :: a }
derive Show Product a
derive Eq Product a
derive Ord Product a

instance Semigroup Num a => Product a where
  Product x `mappend` Product y = Product (x * y)
instance Monoid Num a => Product a where
  mempty = Product one

-- Sum ------------------------------------------------------------------------   
  
data Sum a = Sum { getSum :: a }
derive Show Sum a
derive Eq Sum a
derive Ord Sum a

instance Semigroup Num a => Sum a where
  Sum x `mappend` Sum y = Sum (x + y)
instance Monoid Num a => Sum a where
  mempty = Sum zero

-- Min ------------------------------------------------------------------------  
  
data Min a = Min { getMin :: a }
derive Show Min a
derive Eq Min a
derive Ord Min a

instance Semigroup Ord a => Min a where
  Min a `mappend` Min b = Min (a `min` b)
instance Monoid (Ord a, Bounded a) => Min a where
  mempty = Min maxBound
  
-- Max ------------------------------------------------------------------------ 
  
data Max a = Max { getMax :: a }
derive Show Max a
derive Eq Max a
derive Ord Max a

instance Semigroup Ord a => Max a where
  Max a `mappend` Max b = Max (a `max` b)
instance Monoid (Ord a, Bounded a) => Max a where
  mempty = Max minBound

-- Maybe ---------------------------------------------------------------------

instance Semigroup Semigroup a => Maybe a where
  Nothing `mappend` b = b
  a `mappend` Nothing = a
  Just a `mappend` Just b = Just (Semigroup.mappend a b)
instance Monoid Semigroup a => Maybe a where
  mempty = Nothing

-- First ---------------------------------------------------------------------- 

data First a = First { getFirst :: Maybe a }
derive Show First a
derive Eq First a
derive Ord First a

instance Semigroup First a where
  First Nothing `mappend` y = y
  x `mappend` _ = x
instance Monoid First a where
  mempty = First Nothing
  
-- Last ----------------------------------------------------------------------- 

data Last a = Last { getLast :: Maybe a }
derive Show Last a
derive Eq Last a
derive Ord Last a

instance Semigroup Last a where
  x `mappend` Last Nothing = x 
  _ `mappend` y = y
instance Monoid Last a where
  mempty = Last Nothing

-- Ordering -------------------------------------------------------------------

instance Semigroup Ordering where
  Lt `mappend` _ = Lt
  Eq `mappend` y = y
  Gt `mappend` _ = Gt  

instance Monoid Ordering where
  mempty = Eq
 
-- Endo -----------------------------------------------------------------------

data Endo a = Endo { appEndo :: a -> a }

instance Semigroup Endo a where
  Endo f `mappend` Endo g = Endo (f â€¢ g)
instance Monoid Endo a where
  mempty = Endo id

-- All ------------------------------------------------------------------------  

data All = All { getAll :: Bool }
derive Show All
derive Eq All
derive Ord All

instance Semigroup All where
  All x `mappend` All y = All (x && y)
instance Monoid All where
  mempty = All true

-- Any ------------------------------------------------------------------------

data Any = Any { getAny :: Bool }
derive Show Any
derive Eq Any
derive Ord Any

instance Semigroup Any where
  Any x `mappend` Any y = Any (x || y)
instance Monoid Any where
  mempty = Any false
 
-- Dual -----------------------------------------------------------------------

data Dual a = Dual { getDual :: a }
derive Show Dual a
derive Eq Dual a
derive Ord Dual a

instance Semigroup Semigroup a => Dual a where
  Dual x `mappend` Dual y = Dual (Semigroup.mappend y x)
instance Monoid Monoid a => Dual a where
  mempty = Dual Monoid.mempty

-- IO -------------------------------------------------------------------------

instance Semigroup Semigroup a => IO a where
  mappend = liftM2 Semigroup.mappend
instance Monoid Monoid a => IO a where
  mempty = return Monoid.mempty 

{- 
--with #FlexibleInstances this would generalize to
instance Semigroup (Monad m, Semigroup a) => m a where
  mappend = liftM2 Semigroup.mappend
instance Monoid (Monad m, Monoid a) => m a where
  mempty = return Monoid.mempty 
-}  
  

