package frege.control.monad.lazy.State where

import frege.Prelude hiding (State(..))
import frege.control.monad.MonadTrans

import frege.data.wrapper.Identity

data StateT s m a = StateT { run :: s -> m (a, s) }

type State s a = StateT s Identity a

instance Functor Functor m => (StateT s m) where
  fmap f (StateT k) = StateT (\s -> fmap (\(a, s) -> (f a, s)) (k s))

instance Monad Monad m => (StateT s m) where
  return a = StateT (\s -> return (a, s))

  StateT mf <*> StateT ma = StateT go
    where
      go s = do
        (f, s')  <- mf s
        (a, s'') <- ma s'
        return (f a, s'') 

  StateT ma >>= f = StateT go 
    where
      go s = do
        (a, s') <- ma s
        (f a).run s' 

instance MonadTrans (StateT s) where
  lift ma = StateT (\s -> fmap (\a -> (a, s)) ma)