package frege.control.monad.lazy.Writer where

import frege.control.Monoid
import frege.control.monad.MonadTrans
import frege.data.wrapper.Identity

data WriterT w m a = WriterT { run :: m (a, w) }

type Writer w a = WriterT w Identity a

instance Monad (Monoid w, Monad m) => (WriterT w m) where
  fmap f (WriterT m) = WriterT (fmap (\(a, w) -> (f a, w)) m)

  return a = WriterT (return (a, mempty))

  WriterT mf <*> WriterT ma = WriterT go
    where
      go = do
        (f, w)  <- mf
        (a, w') <- ma
        return (f a, w <> w')

  WriterT ma >>= f = WriterT go
    where
      go = do
        (a, w)  <- ma
        (b, w') <- (f a).run
        return (b, w <> w')

instance MonadTrans Monoid w => (WriterT w) where
  lift ma = WriterT (fmap (\a -> (a, mempty)) ma)