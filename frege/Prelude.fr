-- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

{-
 * $Author$
 * $Revision$
 * $Id$
 * $Date$
 -}


package frege.Prelude where

import frege.prelude.PreludeBase public hiding(Ordering)
import frege.prelude.PreludeBase public (Ordering(Eq EQ, Lt LT, Gt GT))
import frege.prelude.PreludeList public
import frege.prelude.PreludeList public (fold fold', foldl1 foldl1')
import frege.prelude.PreludeText  public
import frege.prelude.PreludeMonad public
import frege.prelude.Arrays public
import frege.prelude.Maybe public
-- derived instances for named types
derive Eq   Ordering
derive Ord  Ordering
derive Enum Ordering

derive Eq   Either a b
derive Ord  Either a b


-- ----------------------- tuple instances ---------------------------
derive Ord      ()

derive Eq       (a,b)
derive Ord      (a,b)


derive Eq       (a,b,c)
derive Ord      (a,b,c)

-- ########### functions and types in asylum here until their prelude package is done #####

print d = printStr (display d)
println d = printStrLn (display d)

{-- unsafe trace, returns always *false* and can thus be used like
    
    > fun x y
    >    | trace   ("x is " ++ show x) = undefined
    >    | traceLn ("y is " ++ show y) = undefined
    >    | otherwise = ......
    
    Note that this imposes strictness on the traced data.
    -}
trace   str = IO.performUnsafe (traceStr str >> IO.return false)
--- same as 'trace' but appends a line break 
traceLn str = IO.performUnsafe (traceStrLn str >> IO.return false)


-- ########### functions that belong in different packages but can't be there because of package hierarchy 

-- should be in PreludeList, but we need the Show instance of Int
{--
    @xs !! n@ is the element with index /n/ of the list /xs/,
    where the head element of a list has index 0.
-}
(x:_)  !! 0         = x
(_:xs) !! n | n > 0 = xs !! (n-1)
(_:_)  !! n         = error ("Prelude.!!: negative index ("     ++ show n ++ ")")
[]     !! n         = error ("Prelude.!!: empty list indexed (" ++ show n ++ ")")

-- should be in PreludeList, but we need Regex.splitted, and this needs Arrays that are ListSources
--- splits a 'String' on end-of-line  and returns a list of 'String's
--- The last line may or may not be terminated by newline.
--- End-of-line is signaled by a number of carriage returns followed by a new line.
--- This should work for UNIX and Windows.
lines "" = []   -- without that we would get [""]
lines s  = ´\r*\n´.splitted s

--- 'unlines' is an inverse operation to 'lines'.
---  It joins lines, after appending a terminating newline to each.
unlines xs 
    | null xs   = ""
    | otherwise = joined "\n" xs ++ "\n"
    
--- splits a 'String' on non empty sequences of spaces  and returns a list of 'String's
words "" = []    -- without that we would get [""]
words s  =   ´\s+´.splitted s

--- 'unwords' is an inverse operation to 'words'.
--- It joins words with separating spaces.
unwords = joined " "
