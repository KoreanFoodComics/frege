-- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

{-
 * $Author$
 * $Revision$
 * $Id$
 * $Date$
 -}


package frege.Prelude where

import frege.prelude.PreludeBase public hiding(Ordering)
import frege.prelude.PreludeBase public (Ordering(Eq EQ, Lt LT, Gt GT))
import frege.prelude.PreludeBase public (from toEnum, ord fromEnum)
import frege.prelude.PreludeNative public hiding(Appendable, StringBuilder)
import frege.prelude.PreludeList public
import frege.prelude.PreludeList public (fold fold', foldl1 foldl1')
import frege.prelude.PreludeText  public
import frege.prelude.PreludeMonad public
import frege.prelude.PreludeIO public
import frege.prelude.Arrays public
import frege.prelude.Maybe public
import frege.java.Lang public 
-- derived instances for named types
derive Eq   Ordering
derive Ord  Ordering
derive Enum Ordering

derive Eq   Either a b
derive Ord  Either a b


-- ----------------------- tuple instances ---------------------------
derive Ord      ()

derive Eq       (a,b)
derive Ord      (a,b)
instance Bounded (Bounded a, Bounded b) => (a,b) where
    maxBound = (maxBound, maxBound) 
    minBound = (minBound, minBound)


derive Eq       (a,b,c)
derive Ord      (a,b,c)
instance Bounded (Bounded a, Bounded b, Bounded c) => (a,b,c) where
    maxBound = (maxBound, maxBound, maxBound) 
    minBound = (minBound, minBound, minBound)

--- Print a value to the standard output stream.
--- Depending on the platform, this may or may not print non-ASCII characters correctly.
print !d   = printStr   (display d)

--- Print a value to the standard output stream and append a platform typical new line character.
--- Depending on the platform, this may or may not print non-ASCII characters correctly.
println !d = printStrLn (display d)

{-- unsafe trace, returns always *false* and can thus be used like
    
    > fun x y
    >    | trace   ("x is " ++ show x) = undefined
    >    | traceLn ("y is " ++ show y) = undefined
    >    | otherwise = ......
    
    Note that this imposes strictness on the traced data.
    -}
trace   str = IO.performUnsafe (traceStr str >> IO.return false)
--- same as 'trace' but appends a line break 
traceLn str = IO.performUnsafe (traceStrLn str >> IO.return false)


