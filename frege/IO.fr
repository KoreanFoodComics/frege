-- enable UTF-8: «««««••••••••••••»»»»»»

{--
 * This module provides definitions for many java classes, interfaces and methods
 * from the java.io package.
 -}

package frege.IO where


infixl 5 `<<`

class Closeable t where
    -- void close() throws IOException
    native close :: t s ->  ST s (Exception ())


type File = FileS RealWorld
data FileS s = native java.io.File where
    native new                :: String -> Mutable FileS s
    native newFS     new      :: FileS s -> String -> Mutable FileS s

    pure native toURI         :: Frozen FileS -> URI
    pure native getPathF  getPath    :: Frozen FileS -> String
    pure native isAbsolute    :: Frozen FileS -> Bool
    pure native separator        java.io.File.separator
                              :: String
    pure native pathSeparator    java.io.File.pathSeparator
                              :: String

    native getPath       :: File -> IO String
    native getName       :: File -> IO String
    native canRead       :: File -> IO Bool
    native canWrite      :: File -> IO Bool
    native isDirectory   :: File -> IO Bool
    native isFile        :: File -> IO Bool
    native exists        :: File -> IO Bool
    native mkdirs        :: File -> IO Bool
    native delete        :: File -> IO Bool
    native renameTo      :: File -> File -> IO Bool
    native lastModified  :: File -> IO Long
    native getParentFile :: File -> IO (Maybe File)

    toURL (f::Frozen FileS) = case f.toURI.toURL of
            Right url -> url
            Left exc  -> throw exc
    native list          :: File -> IO (Maybe StringArr)

instance Serializable FileS

instance Show (FileS Immutable) where show = File.getPathF

data URI = pure native java.net.URI where
    pure native new                        :: String -> Exception URI
    pure native create java.net.URI.create :: String -> URI
    pure native toURL                      :: URI -> Exception (Frozen URLS)
    pure native toString                   :: URI -> String
    pure native toASCIIString              :: URI -> String
    pure native relativize                 :: URI -> URI -> URI

type URL = URLS RealWorld
data URLS s = native java.net.URL where
    native openStream        :: URL -> IO (Exception InputStream)
    pure native toString     :: Frozen URLS -> String


-- type URLArr = Frozen URLArray
-- instance Cloneable URLArray where
--     native our frege.RT.our :: URLArray s -> ST s (Frozen URLArray)
-- 
-- data URLArray s = native "java.net.URL[]" where
--     native new    "java.net.URL[]" :: Int -> Mutable URLArray s
--     native getAt  "frege.rt.Box.<java.net.URL>arrayGet"
--                                                 :: URLArray s -> Int -> ST s (Maybe (URLS s))
--     native setAt  "frege.rt.Box.<java.net.URL>arraySet"
--                                                 :: URLArray s -> Int -> Frozen URLS -> ST s ()
--     pure native frozenGetAt "frege.rt.Box.<java.net.URL>arrayGet"
--                                                 :: URLArr -> Int -> Maybe (Frozen URLS)
--     --- use this only if it is absolutely sure that there are no nulls in the array
--     pure native elemAt "frege.rt.Box.<java.net.URL>arrayGet"
--                                                 :: URLArr -> Int -> Frozen URLS
--     pure native length "frege.rt.Box.<java.net.URL>arrayLen"
--                                                 :: URLArr -> Int
--     toList (a::URLArr) = elems a 0
--         where
--             elems (a::URLArr) i
--                 | i < a.length = case frozenGetAt a i of
--                     Just s  -> s:elems a (i+1)
--                     Nothing -> elems a (i+1)
--                 | otherwise = []
--     fromListST :: [Frozen URLS] -> ST u URLArr
--     fromListST urls = (URLArr.new urls.length >>= loop 0 urls) >>= our where
--         loop j (x:xs) arr = do URLArr.setAt arr j x; loop (j+1) xs arr
--         loop j []     arr = return arr
--     fromList urls = ST.run (fromListST urls)



{-
data CharBuffer = native java.nio.CharBuffer;
-}
-- output
class Appendable a where
    native append            :: a s -> String -> ST s (a s)
    native appendChar append :: a s -> Char   -> ST s (a s)


-- (<<)    :: forall a d Appendable a, Show d . IO (a RealWorld) -> d -> IO (a RealWorld)
ioa << b = do
            a <- ioa
            append a (display b)

type PrintStream = PrintStreamS RealWorld
data PrintStreamS s = native java.io.PrintStream where
    native println :: PrintStream -> IO ()


type OutputStreamWriter = OutputStreamWriterS RealWorld
data OutputStreamWriterS s = native java.io.OutputStreamWriter where
    native new      :: PrintStream -> String -> IO (Exception OutputStreamWriter)
    native close    :: OutputStreamWriter -> IO (Exception ())
    native toWriter "(java.io.Writer)" :: OutputStreamWriterS x -> ST x (WriterS x)


type Writer = WriterS RealWorld
data WriterS s = native java.io.Writer

type PrintWriter = PrintWriterS RealWorld
data PrintWriterS s = native java.io.PrintWriter where
    native print    :: PrintWriter -> String -> IO ()
    native println  :: PrintWriter -> String -> IO ()
    native printLn  println :: PrintWriter -> IO ()
    native open new :: String -> IO (Exception PrintWriter)
    native new      :: File -> IO (Exception PrintWriter)
    native encoded new :: File -> String -> IO (Exception PrintWriter)
    native fromWriter   new    :: Writer -> IO PrintWriter
    native fromWriterAf new    :: Writer -> Bool -> IO PrintWriter
    -- native close    :: PrintWriter -> IO (Exception ())
    native toWriter "(java.io.Writer)" :: PrintWriterS x -> ST x (WriterS x)

instance Closeable PrintWriterS

--- a 'StringWriter' suitable for the 'IO' 'Monad'.
type StringWriter = StringWriterS RealWorld

{-- 
    Frege type for a @java.io.StringWriter@
    
    Not intended for direct use but rather as something
    a 'PrintWriter' can be made of. (Though, because
    of the 'Appendable' instance, one could 
    still 'append' directly.)
    
    To be used like:
    
    > action :: PrintWriter -> IO ()
    > action =  ...
    > actionOnStringWriter :: IO String  
    > actionOnStringWriter = do
    >       sw <- StringWriter.new
    >       pr <- sw.printer
    >       action pr
    >       pr.close
    >       sw.toString  
    -}    
data StringWriterS s = native java.io.StringWriter where
    --- create a fresh 'StringWriter'
    native new      :: () -> ST s (StringWriterS s)
    --- get the content of a 'StringWriter' as 'String'    
    native toString :: StringWriterS s -> ST s String
    --- make a 'PrintWriter' that prints to this 'StringWriter'
    native printer new :: StringWriterS s -> ST s PrintWriter

--- note that the java doc states: _Closing a StringWriter has no effect._ 
instance Closeable StringWriterS
instance Appendable StringWriterS


data StringBuilder s = native java.lang.StringBuilder where
    native new      :: String -> Mutable StringBuilder s
    native toString :: StringBuilder s -> ST s String


instance Appendable PrintStreamS
instance Appendable PrintWriterS


instance Appendable StringBuilder


{-
// instance Show StringBuilder where {
//     show = StringBuilder.toString;
// };
-}

native stdout  java.lang.System.out  :: IO PrintStream
native stderr  java.lang.System.err  :: IO PrintStream

-- Input

native stdin  "java.lang.System.in"  :: IO InputStream

{-
class Readable a where {
    readcb :: a -> CharBuffer -> IO (Exception Int);
};
-}

class Reader Closeable a => a where
    native read :: a RealWorld -> ST RealWorld (Exception Int)


class LineReader Reader a => a where
    native readLine :: a RealWorld -> ST RealWorld (Exception (Maybe String))
    getlines :: a RealWorld -> IO [String]

type InputStream    = InputStreamS RealWorld
data InputStreamS s = native java.io.InputStream

type FileInputStream = FileInputStreamS RealWorld
data FileInputStreamS s = native java.io.FileInputStream where
    native new      :: File -> IO (Exception FileInputStream)
    native open new :: String -> IO (Exception FileInputStream)
    --- downcast from 'FileInputStream' to 'InputStream'
    pure native inputStream "(java.io.InputStream)" :: FileInputStream -> InputStream


type InputStreamReader = InputStreamReaderS RealWorld
data InputStreamReaderS s = native java.io.InputStreamReader where
    -- native close :: InputStreamReader -> IO (Exception ())
    native read  :: InputStreamReader -> IO (Exception Int)
    native new   :: InputStream -> IO (InputStreamReader)
    native encoded new :: InputStream -> String -> IO (Exception InputStreamReader)


type FileReader = FileReaderS RealWorld
data FileReaderS s = native java.io.FileReader where
    --native close :: FileReader -> IO (Exception ())
    native read  :: FileReader -> IO (Exception Int)
    native new   :: File -> IO (Exception FileReader)
    native open new :: String -> IO (Exception FileReader)


{-
data StringReader = native java.io.StringReader where
    native close :: StringReader -> IO (Exception ())
    native read  :: StringReader -> IO (Exception Int)
    protected native new   :: String -> StringReader
-}


instance Reader     InputStreamReaderS
instance Reader     FileReaderS
--instance Reader     StringReader;

type BufferedReader = BufferedReaderS RealWorld
data BufferedReaderS s = native java.io.BufferedReader where
    -- native close :: BufferedReader -> IO (Exception ())
    -- native read :: BufferedReader -> IO (Exception Int)
    native readLine :: BufferedReader -> IO (Exception (Maybe String))
    native new :: FileReader -> IO BufferedReader
    native fromISR new :: InputStreamReader -> IO BufferedReader
    open s = do
                fr <- FileReader.open s
                case fr of
                    Left msg -> Prelude.IO.return (Left msg)
                    Right f  -> do
                                    br <- new f
                                    Prelude.IO.return (Right br)
    -- native fromSR new :: StringReader -> IO BufferedReader
    -- from s = fromSR (StringReader.new s);
    -- getlines :: BufferedReader -> IO [String];
    getlines (br::BufferedReader) = loop [] (repeat br.readLine) where
        loop acc (a:as) = do
            xms <- a
            case xms of
                Right (Just s) ->  loop (s:acc) as
                _              ->  Prelude.IO.return (reverse acc)
        loop acc [] = error "cannot happen because (repeat br.readLine) is infinite"


instance LineReader BufferedReaderS

-- Class Loading & Resources
private pure native md "java.lang.Class.class" :: Class
type ClassLoader = ClassLoaderS RealWorld
data ClassLoaderS σ = native java.lang.ClassLoader where
        native getClassLoader :: Class -> IO ClassLoader
        current = getClassLoader md

-- type URLClassLoader = URLClassLoaderS RealWorld
-- data URLClassLoaderS σ = native java.net.URLClassLoader where
--         native new             :: URLArr -> ClassLoader -> IO (Exception URLClassLoader)
--         native loadClass       :: URLClassLoader -> String -> IO (Exception Class)
--         native getResource     :: URLClassLoader -> String -> IO (Maybe URL)
--         native findResource    :: URLClassLoader -> String -> IO (Maybe URL)
--         pure native classLoader "(java.lang.ClassLoader)" :: URLClassLoaderS α -> ClassLoaderS α

native getSystemResource  java.lang.ClassLoader.getSystemResource :: String -> IO (Maybe URL)


-- System

pure native getenv       System.getenv            :: String -> Maybe String
pure native getProperty  System.getProperty       :: String -> Maybe String
native exit                   System.exit         :: Int -> IO ()
native currentTimeMillis      System.currentTimeMillis :: () -> IO Long

