-- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

{-
    $Author$
    $Revision$
    $Id$
    $Date$
 -}

{--
    Native types we need in the prelude
-}

protected package frege.prelude.PreludeNative where



import frege.prelude.PreludeBase

--- Resembles @java.lang.Appendable@
protected interface Appendable a where
    protected native append            :: a s -> String -> ST s (a s)
    protected native appendChar append :: a s -> Char   -> ST s (a s)

--- Resembles @java.lang.StringBuilder@
data StringBuilder s = native java.lang.StringBuilder where
    native new      :: String -> Mutable StringBuilder s
    native toString :: StringBuilder s -> ST s String

--- One may 'append' 'Char's and 'String's to a 'StringBuilder'
instance Appendable StringBuilder


{--
 *   'Regex' values are based on Java's @java.util.regex.Pattern@ objects.
 *   All regular expression literals are values of this type.
 -}
data Regex = native java.util.regex.Pattern where
    pure native pattern :: Regex -> String
    --- create a 'Matcher' from a regular expression and a 'String'
    pure native matcher :: Regex -> String -> Matcher
    
    {-
        Split a string around matches of a regular expression and return
        the result as list of strings.
        
        Empty strings on the atrt of the string are preserved, but not those
        on the end of the string, e.g.:
        
        >  ´,´.splitted ",,a,b,c,," == ["", "", "a", "b", "c"]
    -}
    pure native splitted split  :: Regex -> String -> [String]
    
--- compile a 'String' to a 'Regex'
pure native regcomp java.util.regex.Pattern.compile :: String -> Exception Regex

{-- compile a 'String' to a 'Regex'

    Use this only if you're sure that pattern compilation will not throw
    an exception, or if you don't care.
-}
pure native regforce java.util.regex.Pattern.compile :: String -> Regex 

{--
    'Matcher' values are based on Java's @java.util.regex.Matcher@ objects.
    Code generation relies on the existence of this type and its operations.

    The native 'Matcher' functions that correspond to java methods
    of the @java.util.regex.Matcher@ class that modify the state of the
    object they are invoked on
    ('Matcher.find', 'Matcher.matches', 'Matcher.replaceFirst', 'Matcher.replaceAll',
    'Matcher.usePattern', 'Matcher.useAnchoringBounds') are implemented
    so that they make a copy of the 'Matcher' and invoke the impure java method
    on the copy.

    Frege 'Matcher's can thus be regarded as read-only values and
    the functions defined here as pure. If you need to pass a 'Matcher' to
    other native functions, be sure that the function is pure. If it is not
    because it would modify the matcher, and you do not need the match result, always
    pass a clone of the Matcher (see 'Matcher.clone')

-}
data Matcher = pure native java.util.regex.Matcher where
    pure  native clone frege.runtime.Regex.clone :: Matcher -> Matcher
    {-- Tries a match and if it succeeds, returns @Just m@, where @m@ is
     *  a new 'Matcher' that contains the result. If there is no match, @Nothing@
     *  is returned.
     *
     *  The following java fragment appends all matched substrings of a string:
     *  > String s = "cats and dogs are not concatenated.";
     *  > Pattern p = Pattern.compile("cat|dog");
     *  > String result = "";
     *  > Matcher m = p.matcher(s);
     *  > while (m.find()) result += m.group(0);  // "catdogcat"
     *  The follwoing frege fragment computes the same result:
        > result = loop m "" where
        >      s = "cats and dogs are not concatenated."
        >      p = #cat|dog#
        >      m = p.matcher s
        >      loop :: Matcher -> String -> String
        >      loop m1 r | Just m2 <- m1.find = loop m2 (r++m2.match)
        >                | otherwise = r
     -}
    pure  native find   frege.runtime.Regex.find :: Matcher -> Maybe Matcher
    --- Tries to match the entire string and returns @Just m@ on success and otherwise @Nothing@.
    pure  native matches frege.runtime.Regex.matches  :: Matcher -> Maybe Matcher
    {--
        Retrieves the input subsequence captured by the given group
        during the previous match operation.

        Capturing groups are indexed from left to right, starting at one.
        Group zero denotes the entire pattern, so the expression @(m.group 0)@
        retrieves that portion of the input string that was matched by the pattern.

        If the match was successful but the group specified failed to match any
        part of the input sequence, then 'Nothing' is returned. Note that some
        groups, for example @(a?)@, match the empty string.
        This functon will return @Just ""@ when such a group successfully
        matches the empty string in the input.

        The folloing property holds for a 'Matcher' /m/ with input
        sequence /s/ and group index /g/:
        > isJust (m.group g) ==> (m.group g) == Just (s.substr (m.start g) (m.end g))
    -}
    pure  native group                :: Matcher -> Int -> (Maybe String)
    {--
        @Matcher.match m@ returns the input subsequence matched by the previous match.
        The result is 'undefined' if the last match was not successful.

        For a 'Matcher' @m@ with input sequence @s@, the following holds:
        > isJust (m.group 0) ==> unJust (m.group 0) == m.match

        Note that some patterns, for example @a?@, match the empty string.
        This method will return the empty string when the pattern successfully
        matches the empty string in the input.
    -}
    pure  native match group          :: Matcher -> String

    {--
        Returns the start index of the subsequence captured by the
        given group during the previous match operation where group 0 denotes
        the entire pattern.

        If the specified capturing group failed to match,
        the return value will be -1.

        The follwoing property holds:
        > (m.group n == Nothing) ==> (m.start n < 0)
    -}
    pure  native start                :: Matcher -> Int -> Int

    {--
        Returns the offset after the last character of the subsequence
        captured by the
        given group during the previous match operation where group 0 denotes
        the entire pattern.

        If the specified capturing group failed to match,
        the return value will be -1.

        The follwoing property holds:
        > (m.group n == Nothing) ==> (m.end n < 0)
    -}
    pure  native end                  :: Matcher -> Int -> Int

    {--
        Makes a new 'Matcher' and causes it to use a different 'Regex' for future matches.

        The original matchers position in the input and its
        last append position is copied, but information about the last match, if any,
        is not.

        This is most useful with patterns that start with the @\\G@ anchor.

        Note that, due to a java bug, if the last find operation matched the empty string,
        the next find will fail. For a workaround see 'Matcher.usePatternAndFind'
    -}
    pure  native usePattern frege.runtime.Regex.usePattern :: Matcher -> Regex -> Matcher

    {--
        Makes a new 'Matcher' with a different 'Regex' and tries to find a match.
        If the last find on the original Matcher returned an empty result, it
        calls @mnew.find(morig.end(0))@ to work around a bug in the java API.
        Therefore, this function must only be used on a matcher whose last match
        attempt was successful.
    -}
    pure  native usePatternAndFind frege.runtime.Regex.usePatternAndFind :: Matcher -> Regex -> Maybe Matcher

    --- Requires or forbids the matcher to acknowledge anchors.
    pure  native useAnchoringBounds frege.runtime.Regex.useAnchoringBounds :: Matcher -> Bool ->  Matcher

    {--
       Returns the string representation of this matcher.
       The string representation of a 'Matcher' contains information
       that may be useful for debugging. The exact format is unspecified.
    -}
    pure  native toString         :: Matcher -> String

    {--
       Replaces the first subsequence of the input sequence that matches
       the pattern with the given replacement string.

       This method scans the input sequence from the start
       looking for a match of the pattern.
       Characters that are not part of the match are appended directly
       to the result string; the match is replaced in the result by the
       replacement string. The replacement string may contain references
       to captured subsequences.

       Note that backslashes (\\) and dollar signs ($) in the replacement
       string may cause the results to be different than if it were
       being treated as a literal replacement string.
       Dollar signs may be treated as references to captured subsequences
       as described above, and backslashes are used to escape
       literal characters in the replacement string.

       Given the regular expression @#dog#@, the input @"zzzdogzzzdogzzz"@,
       and the replacement string @"cat"@, an invocation of this function
       on a matcher for that expression would yield the string
       @"zzzcatzzzdogzzz"@.
    -}
    pure  native replaceFirst frege.runtime.Regex.replaceFirst :: Matcher -> String -> String

    --- Like 'Matcher.replaceFirst', but replaces all matches.
    pure  native replaceAll   frege.runtime.Regex.replaceAll   :: Matcher -> String -> String


-- ### several regex and matcher functions #####

{--
 * > string =~ regex
 * tries to match _string_ against _regex_ and returns
 * @Just matcher@ if it succeeds, @Nothing@ otherwise.
 -}
(s) =~ (p::Regex) = (p.matcher s).find

{--
 * >string ~ regex
 * @true@ if _string_ matches _regex_, @false@ otherwise
 -}
(s) ~ (p::Regex) = case (p.matcher s).find of
    Just _  -> true
    Nothing -> false

{--
 * > s !~ p == !(s ~ p)
 -}
(s) !~ (p) = !(s ~ p)

{--
 * > ("string" ~~ #r??#) == Just "rin"
 * Tries a match and returns @Just x@ where
 * _x_ is the matched substring or @Nothing@ if there was no match.
 *
 -}
s ~~ r =
    case s =~ r of
        Just m -> m.group 0
        Nothing -> Nothing


{--
 * > string ~~~ regex
 * Matches _string_ with _regex_ and returns a function
 * that can be used to extract the matched part of the string and the
 * captured substrings.
 * >   let f = "frege" ~~~ #(..).(..)#
 * >   in [ f i | i <- 0..3 ]
 * yields
 * >[Just "frege", Just "fr", Just "ge", Nothing]
 -}
s ~~~ r =
    case s =~ r of
        Just m  -> m.group
        Nothing -> const Nothing

{--
 * @m ?~ p@ binds pattern _p_ to the matcher _m_
 * and tries a match. There must have been a successful
 * match on _m_ before.

 * Returns 'Nothing' if match fails, else ('Just' @m@).

 * This function is most usefull in conjunction with patterns that
 * use the G-anchor when one wants to extract
 * multiple differnt adjacent items from a string.
 
 -}
(m::Matcher) ?~ (p) =  m.usePatternAndFind p

{--
 * > m /~ p
 * is like
 * > m ?~ p
 * but instead of the
 * matcher it returns the matched string, if any.
 -}
(m) /~ (p) = case m ?~ p of
        Just m  -> Matcher.group m 0
        Nothing -> Nothing

