{-
    Copyright Â© 2011, Ingo Wechsung
 
    All rights reserved.
 
    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

    -   Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

    -   Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.
 
    *THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.*
-}

{--
 
    This package provides common list functions for the Frege language.
    
    It contains all functions described in section 9.1 of the 
    _Haskell 2010 Language Report_, except for @lookup@, which has been moved 
    to @frege.data.List@ (the equivalent of Haskell's @Data.List@).
    
    In addition to the common list functions, three type classes capture common
    properties of types that are like ordinary lists:
    ['Empty'] provides 'null' to test for empty containers and 'empty' to create one.
    ['ListLike'] provides 'length', 'head', 'tail' and '++'
    ['ListSource'] is the type class for types that can be converted to lists ('toList'). 
    There are instances for 'String', 'Maybe', 'Either' and arrays. 
    
    The functions 'words' and 'lines' take 'String' arguments and return lists of 'String', 
    whereas 'unwords' and 'unlines' take an instance of 'ListSource' with 'String' elements
    and return a single 'String'.

    This package is /implementation specific/ insofar as the compiler may
    assume that certain items are defined here in a certain way.
    Changes may thus lead to compiler crashes or java code that 
    will be rejected by the java compiler.
    
    In particular, desugared list comprehensions will reference 'ListSource.toList'.
    
    This package is implicitly imported.
 -}



protected package frege.prelude.PreludeList where

import frege.prelude.PreludeBase
import frege.prelude.PreludeBase(StringJ)

{--
    A class for containers/collections that have an empty value.
    -}
class Empty c where
    --- *true* if and only if the container is 'empty'
    null :: c e -> Bool
    --- the empty container
    empty :: c e
     
{--
    A class for data types that can be viewed as list.
    
    Such data types are instances of 'Empty' 
    and support 'head', 'tail', 'length' and concatenation ('++')
    
    This class provides no means to construct a list. 
    -}
class ListLike  Empty list => list where
    --- computes the length of a list in a type dependend way
    length :: list elem -> Int
    --- Get the element at the head of a non empty list, otherwise 'undefined'
    head :: list elem -> elem
    --- Get the tail elements. This is 'undefined' if the list is empty.
    tail :: list elem -> list elem
    --- concatenate two lists, strings or whatever
    ---  > empty ++ x == x && x ++ empty == x
    (++) :: list e -> list e -> list e

{--
    A class for things we can make a list from
    -}
class ListSource t  where
    --- converts the value to a list
    toList :: t e -> [e]

--  ------------------------
--  Instances for []
--  ------------------------

derive Ord      [a]

--  ------------------------
--  Instances for ListLike
--  ------------------------

instance ListLike StringJ where
    
    -- 'String.length' is defined in the 'StringJ' type
    
    --- The first element of a 'String' or 'undefined' if the string is empty.
    head s = s.itemAt 0 
    
    --- The tail of a 'String' or undefined if it is empty
    tail s = strtail s 1
    
    -- concatenation is defined in 'String.++'
     
    --- @true@ if and only if the length of the string is 0
    null s = length s == 0
    
    --- A polymorphic empty string. 
    --- This is the only string value whose type is not 'String' that must ever exist.
    pure native empty frege.runtime.Runtime.emptyString :: StringJ elem   

instance ListLike [] where
    --- Get the length of a list
    length as = len as 0 where
        len (_:as) !acc = len as (acc+1)
        len []     !acc = acc
    
    --- The first element of a list or 'undefined' if it is empty.
    head (hd:_) = hd
    head []     = error "Prelude.head []"
    
    --- The tail of a list or undefined if it is empty
    tail (_:tl) = tl
    tail []     = error "Prelude.tail []"
    
    --- Concatenation of 2 lists
    (a:as) ++ bs = a : as ++ bs
    _      ++ bs = bs
    
    --- *true* for the empty list, false otherwise
    null [] = true
    null _  = false
    
    --- the empty list
    empty = []

--  ------------------------
--  Instances for ListSource
--  ------------------------
instance ListSource [] where
    --- The list itself.
    toList xs = xs

instance ListSource Maybe where
    --- Singleton with element from 'Just' or empty list for 'Nothing' 
    toList (Just a) = [a]
    toList Nothing  = []

instance ListSource  Either l where
    --- Singleton with element from 'Right' or empty list for 'Left'
    toList (Left _) = []
    toList (Right a) = [a]

instance ListSource StringJ where
    --- List of characters, computed lazily in contrast to 'unpacked'
    toList s
        | null s    = []
        | otherwise = head s : toList (tail s)


--
--  Conversion between 'String's and lists and String functions that need the above
--

--- Eagerly converts a 'String' to a list.
unpacked :: String -> [Char]
unpacked s = loop (length s - 1) [] where
        loop :: Int -> [Char] -> [Char]
        loop i res
            | i >= 0 = loop (i-1) (s.charAt i : res)
            | otherwise = res

{--
    convert a list of characters to a string
    > packed ['a', 'b', 'c' ] == "abc"
    Not very efficient, may be replaced by a java function that does it with a
    string buffer later.
    -}
-- fast packed moved to PreludeText    
protected packed [] = ""
protected packed cs = fold (++) "" (map ctos cs)

{--
    @strhead s n@ returns the initial portion of s with at most n characters.
    if s.'length' is lower than n, only so much characters are returned.
    -}
strhead s i = substr s 0 (min i s.length)

--
--  Common list functions. Includes what Haskell 2010 has in Data.List
--       

{--
    'and' returns the conjunction of a Boolean list. 
    For the result to be *true*, the list must be finite; *false*,
    however, results from a *false* value at a finite index of a finite or infinite list.
    -}
and (x:xs) = if x then and xs else false
and _      = true

{--
    'or' returns the disjunction of a Boolean list. 
    For the result to be *false*, the list must be finite; *true*,
    however, results from a *true* value at a finite index of a finite or infinite list.
    -}
or (x:xs) = if x then true else or xs
or _      = false    

{--
    @any p xs@ tells if any element of /xs/ has property /p/.
    This is equivalent to @fold (||) false (map p xs)@ except that
    'any' stops at the first element that has property /p/.

    Note that, according to the identity above,  @any p []@ is always @false@.
    -}
any p (x:xs) = if p x then true else any p xs
any p [] = false

{--
    @all p xs@ tells if all elements of /xs/ have property /p/.
    This is equivalent to @fold (&&) true (map p xs)@ except that
    'all' stops at the first element that hasn't property /p/.

    Note that, according to the identity above, @all p []@ is always @true@.
    -}
all p (x:xs) = if p x then all p xs else false
all p [] = true


{--
    'concat' concatenates the subitems of the argument which is a list of list
    or a list of strings.
    It is ok if the argument is an infinite list or any of the sublists is infinite.
    In either case, the result will also be infinite.
    -}
concat xss = foldr (++) empty xss

{--
    Map a function over a list and concatenate the list or string results.
    -}
concatMap f as = concat (map f as) -- [ x | xs <- map f as, x <- xs ]    

{--
    @cycle xs@ builds a value that is an infinite repetition of /xs/, which must not be empty.
    -}
cycle :: [a] -> [a]    
cycle xs | null xs   = error "Prelude.cycle []"
         | otherwise = xs ++ cycle xs


{--
    @filter p xs@ returns the list of elements /x/ from /xs/ where (/p/ /x/) holds.

    'filter' will not stop to evaluate its argument list until the first
    element with the property asked for is found. For example

    > filter (==true) (repeat false)

    will loop forever, whereas

    > filter iseven (iterate succ 1n) where iseven n = n `band` 1n == 0n

    will faithfully deliver the list of positive integers that are divisible by 2,
    one by one.
    -}
filter p (x:xs) = if p x then x:filter p xs else filter p xs
filter p []     = []



{--  warning: It is strongly advised to use 'fold' instead - beware of stack overflow!

    'foldl', applied to a binary operator, a starting value (typically the
    left identity of the operator), and a list, reduces the list using
    the binary operator, from left to right:

    > fold f z [x1, x2, ..., xn] = (((z `f` x1) `f` x2) `f` ...) `f` xn

    Because the operator is applied lazily, 'foldl' typically builds up
    large thunks which, when finally evaluated, may overflow the stack space.
    Therefore, the use of 'fold' instead of 'foldl' is strogly suggested.

    This function exists merely for compatibility with Haskell.

-}
foldl f acc (x:xs) = foldl f  (f acc x) xs
foldl f acc []     = acc

{--
    'fold', applied to a binary operator, a starting value (typically the
    left identity of the operator), and a list, reduces the list using
    the binary operator, from left to right:
    > fold f z [x1, x2, ..., xn] = (((z `f` x1) `f` x2) `f` ...) `f` xn
    'fold' runs in constant stack space, but consumes the entire list before
    returning a result, so it must not be applied to infinite lists.

    This function is known as @foldl'@ in Haskell where there is a bias in favour
    of using 'foldr'.

    In the environment of the JVM stack space is precious, hence one should prefer 'fold'
    when one has the choice.

    'fold' is strict in the accumulator, hence in
    every recursion the intermediate result is evaluated, thus preventing build up of
    possibly huge thunks that result in stack overflows on evaluation.
    -}
fold f !acc (x:xs) = fold f (f acc x) xs
fold f !acc []     = acc

--- The sum of the numbers in a list, same as ('fold' ('+') 'zero')
sum = fold (+) zero

--- The product of the numbers in a list, same as ('fold' ('*') 'one')
product = fold (*) one

--- The minimal value of a non empty list, same as ('foldl1' 'min') 
minimum = foldl1 min

--- The maximal value of a non empty list, same as ('foldl1' 'max') 
maximum = foldl1 max



{--
    'foldl1' is a variant of 'fold' that has no starting value argument
    and thus must be applied to nonempty lists only.
    -}
foldl1 f (x:xs) = fold f x xs
foldl1 f _      = error "Prelude.foldl1 f []"

{--
    'scanl' is similar to 'fold' but returns a list of successive
    reduced values from the left:
    > scanl f z [x1, x2, ...] = [z, z `f` x1, (z `f` x1) `f` x2, ... ]
    The follwoing property holds for all finite lists /xs/:
    > last (scanl f z xs) == fold f z xs
    In contrast to 'fold', 'scanl' can operate on infinite lists.
     -}
scanl f !q (x:xs) = q : scanl f (f q x) xs
scanl f !z []     = [z]

{--
    'scanl1' is similar to 'scanl', but takes the 'head' of the list as
    starting element and is thus only applicable to non-empty lists.
    > scanl1 f [x1, x2, ...] = [x1, x1 `f` x2, (x1 `f` x2) `f` ...]
    -}
scanl1 f (x:xs)  = scanl f x xs
scanl1 f _       = error "Prelude.scanl1 f []"


--- 'scanr' is the right-to-left dual of 'scanl'.
--- Note that
--- > head (scanr f z xs) == foldr f z xs.
scanr :: (Î±->Î²->Î²) -> Î² -> [Î±] -> [Î²]
scanr f q0 (x:xs)       =  f x q : qs
                           where qs = scanr f q0 xs
                                 q  = head qs
scanr _ q0 []           =  [q0] 

--- 'scanr1' is a variant of 'scanr' that has no starting value argument.
-- scanr1 :: ListSource b => (a -> a -> a) -> b a -> [a]
scanr1 _ [x]            =  [x]
scanr1 f (x:xs)         =  f x q : qs
                           where qs = scanr1 f xs
                                 q  = head qs 
scanr1 _ []             =  []

{--
    Fold over a list from right to left.
    > foldr f a (x1:x2:x3:[])
    is the same as
    > x1 `f` (x2 `f` (x3 `f` a))
    Note that, if /f/ is strict in the second argument,
    @foldr f@ will need stack space proportional
    to the length of the list.
    But if /f/ is lazy in it's second argument, 'foldr' works on infinite lists.

    If /f/ is commutative, the list finite and lazyness not an issue,
    'fold' may be the better choice since it runs with constant stack space.
    Otherwise, if /f/ is not commutative, 'foldrs' will trade time and heap space for
    stack space by 'fold'ing the 'flip'ped /f/ over the 'reverse'd list.
    -}
-- foldr :: ListSource c => (e->a->a) -> a -> c e -> a
foldr f acc (x:xs) =  x `f` (foldr f acc xs)
foldr f acc []     = acc

--- 'foldr1' is a variant of 'foldr' that has no starting argument, and thus must be applied to a non-empty list 
foldr1 f (x:xs) = foldr f x xs
foldr1 f _      = error "Prelude.foldr1 f []"    

{--
    This function may be used in place of
    > foldr f z xs
    if /f/ is strict in its right operand and /xs/ is a finite list,
    in cases where 'foldr' exceeds the stack size, which is usually quite limited in
    the JVM.

    'foldrs' will need extra CPU cycles and maybe (temporary) heap space for
    'reverse'-ing its list argument, before 'fold'ing the 'flip'ped /f/ over it.

    If /f/ is commutative, you may simply use 'fold' instead.

    The following property holds for all finite lists /xs/:
    > foldr f z xs == foldrs f z xs
    -}
foldrs f z xs = fold (flip f) z (reverse xs)

--- Returns all but the last element from a list.
--- The following property holds for all non-empty finite lists /xs/:
--- > init xs ++ [last xs] == xs
init [x]    = []
init (x:xs) = x : init xs
init _      = error "Prelude.init: empty list"


--- Returns the last element of a list by taking the 'head' of the 'reverse'd list.
--- See also 'init'
last = head â¢ reverse


{--
    @map f xs@ applies /f/ to each element of /xs/ and builds a new list from the results.

    Usage of 'map' is safe on infinite lists, it delivers the result list one by
    one as it is demanded.
    -}
map f (x:xs) = (f x):map f xs
map f _      = []

{--
    reverses a list
    -}
reverse xs = rev xs [] where
    rev (x:xs) ys = rev xs (x:ys)
    rev _     ys = ys

{--
    @take n xs@ returns the starting sequence of /xs/ with at most /n/ elements.
    If /n/ is greater than the 'length' of /xs/, the result is /xs/.

    For negative /n/, the result is undefined.

    The following property holds for all lists /xs/ and non negative /n/:
    > take n xs ++ drop n xs == xs
    -}
take 0 _ = []
take n (x:xs) = x:take (n-1) xs
take n _ = []

{--
    @drop n xs@ returns what remains from /xs/ after the /n/ leading elements have been dropped.
    If /n/ is greater than the 'length' of /xs/, the result is the empty list.

    For negative /n/, the result is undefined.

    The following property holds for all lists /xs/ and non negative /n/:
    > take n xs ++ drop n xs == xs
    -}
drop 0 lst = lst
drop n (x:xs) = drop (n-1) xs
drop n _ = []

{--
    @splitAt n xs@ returns a tuple where first element is /xs/ prefix of length /n/ 
    and the second element is the
    remainder of the list.
-}
splitAt n xs = (take n xs, drop n xs)

{--
    @takeWhile p xs@ takes leading elements from /xs/ while they satisfy the predicate /p/.

    Example:
    > takeWhile (<7) [1,2,3,9,4] == [1,2,3]
    -}
takeWhile p (x:xs) = if p x then x:takeWhile p xs else []
takeWhile p _      = []

{--
    @dropWhile p xs@ drops leading elements from /xs/ that satisfy the predicate /p/.

    The following holds for all lists /xs/
    > takeWhile p xs ++ dropWhile p xs == xs
    -}
dropWhile p (list@(x:xs)) = if p x then dropWhile p xs else list
dropWhile p _             = []
    

{--
    @span p xs@ returns a tuple whose first element is the longest prefix of @xs@
    elements that satisfy @p@ and whose second element is the remainder of the list.

    > span p xs == (takeWhile p xs, dropWhile p xs)
    -}
span p xs = (takeWhile p xs, dropWhile p xs)

{--
    'break', applied to a predicate /p/ and a list /xs/, 
    returns a tuple where the first element is the longest prefix
    (possibly empty) of /xs/ elements that do *not* satisfy /p/ 
    and the second element is the remainder of the list.

    @break p@ is equivalent to @span (not â¢ p)@.
-}
break p = span (not â¢ p)

{--
    @e `elem` xs@ is true if and only if at least one of the elements of /xs/ equals /e/.
    -}
elem e (h:t) = e == h || elem e t
elem e _     = false

--- opposite of 'elem'
notElem e es = not ( elem e es )


{--
    @repeat a@ builds an infinite list where all elements are /a/.
    -}
repeat a = node where node = a:node

-- @replicate n x@ is a list of length /n/ with /x/ the value of every element.
replicate n = take n â¢ repeat


{--
    @iterate f a@ builds the infinite list @[a, f a, f (f a), ...]@
    -}
iterate f a = a:iterate f (f a)



{--
    @zip as bs@ builds a list of tuples of corresponding elements of /as/ and /bs/.
    Trailing elements of the longer list are ignored.
    > zip (1,2,3) "ab" = [(1, "a"), (2, "b")]
    -}
zip (x:xs) (y:ys) = (x,y):zip xs ys
zip _ _  = []

{--
    'unzip' turns a list of tuples into a tuple of lists.
    It is the opposite of 'zip' and the follwoing holds for genuine lists
    > (curry zip @ unzip) xs == xs
    But note that
    > (unzip @ curry zip) (as, bs) == (as,bs)
    will only hold if @length as == length bs@
    -}
unzip    =  foldr (\(a,b) \(as,bs) -> (a:as,b:bs)) ([];[])    


{--
    @zipWith f xs ys@ zips two lists with function /f/ instead of the standard '(,)' that
    is used by 'zip'
    -}
zipWith f (x:xs) (y:ys) = f x y:zipWith f xs ys
zipWith _ _ _ = []

--- 'zip3' zips 3 lists in the same way as 'zip' does it.
zip3 (a:as) (b:bs) (c:cs) = (a,b,c):zip3 as bs cs
zip3 _ _ _ = []

--- 'unzip3' unzips a list of triples and returns a triple of lists.
unzip3    =  foldr (\(a,b,c) \(as,bs,cs) -> (a:as,b:bs,c:cs)) ([];[];[])    

--- 'zipWith3' /f/ zips 3 lists with function /f/ instead of the standard '(,,)' that is used by 'zip3'
zipWith3 f (a:as) (b:bs) (c:cs) = f a b c:zipWith3 f as bs cs
zipWith3 f _ _ _ = []

{--
    @intersperse a xs@ inserts /a/ between every two elements of /xs/
    > intersperse 0 (1..3) == [1,0,2,0,3]
    -}
protected    intersperse a [x]      = [x]
protected    intersperse a (x:ys)   = x:a:intersperse a ys
protected    intersperse a []       = []


{--
    @xs !! n@ is the element with index /n/ of the list /xs/,
    where the head element of a list has index 0.
-}
(x:_)  !! 0         = x
(_:xs) !! n | n > 0 = xs !! (n-1)
(_:_)  !! n         = error ("Prelude.!!: negative index ("     ++ String.intToString n ++ ")")
[]     !! n         = error ("Prelude.!!: empty list indexed (" ++ String.intToString n ++ ")")


